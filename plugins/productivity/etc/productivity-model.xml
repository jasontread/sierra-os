<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE entity-model PUBLIC "-//SIERRA//DTD ENTITY MODEL//EN" 
  "http://sierra-php.googlecode.com/svn/trunk/lib/model/entity-model.dtd">
<entity-model>
  <entity key="MyProject" primary-key="projectId" render-append="getCompleteConfirmMsg getIcon getUserPermissions getType" render-exclude="emailParticipants files fileCategories messages messageCategories participants searchIndex tasks whiteboards wfParams">
    <ajax-service key="createMyProject" create="1">
      <ajax-constraint-group key="validateUser">
        <ajax-constraint attr="creator" auto-set="1" value="user_uid" value-type="global" />
      </ajax-constraint-group>
    </ajax-service>
    <ajax-service key="myProjectPrint" limit="1" raw="1" view="print" />
    <ajax-service key="updateMyProject" delete="1" update="1" />
    <aop>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && ($inserted || isset($oldDirtyFlags['name']) || isset($oldDirtyFlags['summary']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId(), $updated); }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      if ($this->recordExists && !$this->verifyPermissions()) {
        global $user;
        return SRA_Error::logError('MyProjectVO: Error - Invalid attempt to access project ' . $this->getPrimaryKey() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user; ]]></aspect>
      <aspect key="deleteWorkflow" pointcut="dao.delete" when="after"><![CDATA[
      if ($deleted && $projectWorkflow) { $projectWorkflow->delete(); }
      ]]></aspect>
      <aspect key="extraValidation" pointcut="vo.validate" when="after"><![CDATA[
      $resources =& $this->getEntityResources();
      
      // only project admin can make changes to project header
      if (!$this->validateErrors && $this->recordExists && $this->isDirty() && !$this->verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN)) {
        $this->validateErrors[] = $resources->getString('MyProject.error.notAdmin');
      }
      
      // project with pending tasks cannot be set to completed
      if (!$this->validateErrors && $this->isDirty('status') && $this->getStatus() == MY_PROJECT_STATUS_COMPLETED && $this->hasPendingTasks()) {
        $this->validateErrors['status'] = $resources->getString('MyProject.error.hasPendingTasks');
      }
      
      // error status is not valid when project is not assigned to workflow or 
      // if workflow is not also in error status
      if (!$this->validateErrors && $this->isDirty('status') && $this->getStatus() == MY_PROJECT_STATUS_ERROR && ($wf =& $this->getWf()) && $wf->getStatus() != MY_PROJECT_STATUS_ERROR) {
        $this->validateErrors['status'] = $resources->getString('MyProject.error.cannotSetToErrorStatus');
      }
      
      // only completed or cancelled projects can be archived
      if (!$this->validateErrors && $this->isDirty('archived') && $this->isArchived() && $this->getStatus() != MY_PROJECT_STATUS_COMPLETED && $this->getStatus() != MY_PROJECT_STATUS_CANCELLED && $this->getStatus() != MY_PROJECT_STATUS_ERROR) {
        $this->validateErrors['archived'] = $resources->getString('MyProject.error.cannotArchive');
      }
      
      // due date cannot be changed
      if (!$this->validateErrors && $this->recordExists && $this->isDirty('dueDate') && $this->isDueDateFixed()) {
        $this->validateErrors['dueDate'] = $resources->getString('MyProject.error.cannotChangeDueDate');
      }
      
      // validate new due date: cannot be prior to any task due date
      if (!$this->validateErrors && $this->recordExists && $this->isDirty('dueDate') && SRA_GregorianDate::isValid($dueDate = $this->getDueDate())) {
        $db =& SRA_Controller::getAppDb();
        if (SRA_Database::getRecordCount($db, 'SELECT task_id FROM my_project_task WHERE project_id=' . $this->getPrimaryKey() . ' AND due_date > ' . $db->convertDate($dueDate))) {
          $this->validateErrors['dueDate'] = $resources->getString('MyProject.error.dueDatePriorToTask');
        }
      }
      ]]></aspect>
      <aspect key="getFilesCount" pointcut="vo.getFilesCount"><![CDATA[
      // optimizes this method by using the database to return the count
      $db =& SRA_Controller::getAppDb();
      return SRA_Database::getQueryValue($db, 'SELECT count(*) FROM my_project_file WHERE project_id=' . $db->convertInt($projectId ? $projectId : $this->getProjectId()), SRA_DATA_TYPE_INT);
      ]]></aspect>
      <aspect key="getMessagesCount" pointcut="vo.getMessagesCount"><![CDATA[
      // optimizes this method by using the database to return the count
      $db =& SRA_Controller::getAppDb();
      return SRA_Database::getQueryValue($db, 'SELECT count(*) FROM my_project_message WHERE project_id=' . $db->convertInt($projectId ? $projectId : $this->getProjectId()), SRA_DATA_TYPE_INT);
      ]]></aspect>
      <aspect key="getWhiteboardsCount" pointcut="vo.getWhiteboardsCount"><![CDATA[
      // optimizes this method by using the database to return the count
      $db =& SRA_Controller::getAppDb();
      return SRA_Database::getQueryValue($db, 'SELECT count(*) FROM my_project_whiteboard WHERE project_id=' . $db->convertInt($projectId ? $projectId : $this->getProjectId()), SRA_DATA_TYPE_INT);
      ]]></aspect>
      <aspect key="initializeFromTemplate" pointcut="dao.insert" when="after"><![CDATA[
      if ($inserted && ($template =& $record->getProjectTemplate())) {
        $template->initializeProject($record);
      }
      ]]></aspect>
      <aspect key="removeDeletingFlag" pointcut="dao.delete" when="after"><![CDATA[
      // remove deleting flag
      if ($record) { unset($_myProjectsDeleting[$record->getProjectId()]); }
      ]]></aspect>
      <aspect key="serializeWfParams" pointcut="vo.setWfParams"><![CDATA[
      if (is_array($wfParams)) { $wfParams =& serialize($wfParams); }
      ]]></aspect>
      <aspect key="setDeletingFlag" pointcut="dao.delete"><![CDATA[
      // set deleting flag
      global $_myProjectsDeleting;
      if (!$_myProjectsDeleting) { $_myProjectsDeleting = array(); }
      if ($record) { $_myProjectsDeleting[$record->getProjectId()] = TRUE; }
      ]]></aspect>
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setProjectIdEmailParticipants" pointcut="vo.addEmailParticipants"><![CDATA[
      if (is_array($emailParticipants)) {
        $keys = array_keys($emailParticipants);
        foreach($keys as $key) {
          $emailParticipants[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectEmailParticipantVO::isValid($emailParticipants)) {
        $emailParticipants->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdFileCategories" pointcut="vo.addFileCategories"><![CDATA[
      if (is_array($fileCategories)) {
        $keys = array_keys($fileCategories);
        foreach($keys as $key) {
          $fileCategories[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectFileCategoryVO::isValid($fileCategories)) {
        $fileCategories->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdFiles" pointcut="vo.addFiles"><![CDATA[
      if (is_array($files)) {
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectFileVO::isValid($files)) {
        $files->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdMessageCategories" pointcut="vo.addMessageCategories"><![CDATA[
      if (is_array($messageCategories)) {
        $keys = array_keys($messageCategories);
        foreach($keys as $key) {
          $messageCategories[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectMessageCategoryVO::isValid($messageCategories)) {
        $messageCategories->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdMessages" pointcut="vo.addMessages"><![CDATA[
      if (is_array($messages)) {
        $keys = array_keys($messages);
        foreach($keys as $key) {
          $messages[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectMessageVO::isValid($messages)) {
        $messages->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdParticipants" pointcut="vo.addParticipants"><![CDATA[
      if (is_array($participants)) {
        $keys = array_keys($participants);
        foreach($keys as $key) {
          $participants[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectParticipantVO::isValid($participants)) {
        $participants->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdTasks" pointcut="vo.addTasks"><![CDATA[
      if (is_array($tasks)) {
        $keys = array_keys($tasks);
        foreach($keys as $key) {
          $tasks[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectTaskVO::isValid($tasks)) {
        $tasks->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdWhiteboards" pointcut="vo.addWhiteboards"><![CDATA[
      if (is_array($whiteboards)) {
        $keys = array_keys($whiteboards);
        foreach($keys as $key) {
          $whiteboards[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectWhiteboardVO::isValid($whiteboards)) {
        $whiteboards->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="updateWorkflowStatus" pointcut="dao.update" when="after"><![CDATA[
      if ($updated && isset($oldDirtyFlags['status']) && ($wf =& $record->getWf()) && (($record->getStatus() == MY_PROJECT_STATUS_CANCELLED && $wf->getStatus() == 'in-progress') || ($record->getStatus() == MY_PROJECT_STATUS_ACTIVE && $wf->getStatus() == MY_PROJECT_STATUS_CANCELLED))) {
        $wf->setStatus($record->getStatus() == MY_PROJECT_STATUS_CANCELLED ? MY_PROJECT_STATUS_CANCELLED : 'in-progress');
        $wf->update();
      }
      if ($updated && isset($oldDirtyFlags['dueDate']) && ($wf =& $record->getWf())) {
        $wf->setDueDate($record->getDueDate());
        $wf->update();
      }
      ]]></aspect>
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!$record->verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN)) {
        return SRA_Error::logError('MyProjectDAO::delete: Error - Invalid attempt to delete project ' . $record->getName() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      // get workflow for later deletion
      $projectWorkflow =& $record->getWf();
      ]]></aspect>
      <aspect key="verifyReadPermissionsFiles" advice="verifyReadPermissions" pointcut="vo.getFiles" />
      <aspect key="verifyReadPermissionsMessages" advice="verifyReadPermissions" pointcut="vo.getMessages" />
      <aspect key="verifyReadPermissionsName" advice="verifyReadPermissions" pointcut="vo.getName" />
      <aspect key="verifyReadPermissionsSummary" advice="verifyReadPermissions" pointcut="vo.getSummary" />
      <aspect key="verifyReadPermissionsTasks" advice="verifyReadPermissions" pointcut="vo.getTasks" />
      <aspect key="verifyReadPermissionsWhiteboards" advice="verifyReadPermissions" pointcut="vo.getWhiteboards" />

      
      <introduction key="getCompleteConfirmMsg" class="vo" type="method" value="getCompleteConfirmMsg()"><![CDATA[
      // return localized complete confirm message
      if (!isset($this->_completeConfirmMsg)) { $this->_completeConfirmMsg = $this->_completeConfirm && ($rb =& $this->getProjectTemplateResources()) ? $rb->getString($this->_completeConfirm) : $this->_completeConfirm; }
      return $this->_completeConfirmMsg;
      ]]></introduction>
      
      <introduction key="getCreatorName" class="vo" type="method" value="getCreatorName()"><![CDATA[
      // returns the name of the project creator
      return OsUserVO::getNameFromUid($this->getCreator());
      ]]></introduction>
      
      <introduction key="getIcon" class="vo" type="method" value="getIcon($size=NULL)"><![CDATA[
      // returns the uri to the icon for this project. if this project is based 
      // on a template, the uri will be to the icon for that template. otherwise
      // it will be for the default project icon. the size token in this URI is 
      // ${size}
      return $template =& $this->getProjectTemplate() ? $template->getIcon($size) : ($size ? str_replace('${size}', $size, MY_PROJECT_DEFAULT_ICON_URI) : MY_PROJECT_DEFAULT_ICON_URI);
      ]]></introduction>
      
      <introduction key="getEmailParticipant" class="vo" type="method" value="&amp; getEmailParticipant($email, $projectId=NULL)"><![CDATA[
      // returns the MyProjectEmailParticipant reference for the $email 
      // specified. can also be invoked statically using the $projectId 
      // parameter
      $projectId = $projectId ? $projectId : $this->getProjectId();
      
      if ($projectId && $email) {
        $db =& SRA_Controller::getAppDb();
        $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
        return $dao->findByQuery('SELECT participant_id FROM my_project_email_participant WHERE project_id=' . $db->convertInt($projectId) . ' AND email=' . $db->convertText($email));
      }
      else {
        $nl = NULL;
        return $nl;
      }
      ]]></introduction>
      
      <introduction key="getParticipant" class="vo" type="method" value="&amp; getParticipant($id, $group=FALSE, $projectId=NULL)"><![CDATA[
      // returns the MyProjectParticipant reference for the $id specified. if, 
      // $id is not specified, the user participant record will be returned
      // if $group is TRUE, $id will be assumed to be a gid, otherwise it is 
      // assumed to be a uid. can also be invoked statically using the 
      // $projectId parameter
      
      $projectId = $projectId ? $projectId : $this->getProjectId();
      
      if (!$id) {
        global $user;
        if ($user) {
          $id = $user->getUid();
          $group = FALSE;
        }
      }
      
      if ($projectId && $id) {
        $db =& SRA_Controller::getAppDb();
        $dao =& SRA_DaoFactory::getDao('MyProjectParticipant');
        return $dao->findByQuery('SELECT participant_id FROM my_project_participant WHERE project_id=' . $db->convertInt($projectId) . ' AND id=' . $db->convertInt($id) . ' AND is_group=' . $db->convertBoolean($group));
      }
      else {
        $nl = NULL;
        return $nl;
      }
      ]]></introduction>
      
      <introduction key="getParticipantIdFromTemplate" class="vo" type="method" value="getParticipantIdFromTemplate($conf)"><![CDATA[
      // returns the id of the MyProjectParticipant or MyProjectEmailParticipant 
      // object associated with a template configuration. if their is no 
      // participant associated with that configuration, NULL will be returned
      
      // MyProjectParticipant
      if ($conf['attributes']['id']) {
        if ($participants =& $this->getParticipants()) {
          $keys = array_keys($participants);
          foreach($keys as $key) {
            if ($participants[$key]->getId() == $conf['attributes']['id'] && (($conf['attributes']['group'] && $participants[$key]->isIsGroup()) || (!$conf['attributes']['group'] && !$participants[$key]->isIsGroup()))) {
              return $participants[$key]->getParticipantId();
            }
          }
        }
      }
      // MyProjectEmailParticipant
      else {
        if ($participants =& $this->getEmailParticipants()) {
          $keys = array_keys($participants);
          foreach($keys as $key) {
            if ($participants[$key]->getEmail() == $conf['attributes']['email']) {
              return $participants[$key]->getParticipantId();
            }
          }
        }
      }
      return NULL;
      ]]></introduction>
      
      <introduction key="getPendingTasks" class="vo" type="method" value="&amp; getPendingTasks($topLevelOnly=TRUE, $projectId=NULL)"><![CDATA[
      // returns the pending tasks associated with this project. if $topLevelOnly is TRUE, then only the top level tasks will be returned
      $dao =& SRA_DaoFactory::getDao('MyProjectTask');
      return $dao->findByPks(MyProjectVO::getPendingTasksIds($topLevelOnly, $projectId ? $projectId : $this->getProjectId()));
      ]]></introduction>
      
      <introduction key="getPendingTasksCount" class="vo" type="method" value="getPendingTasksCount($topLevelOnly=TRUE, $projectId=NULL)"><![CDATA[
      // returns the # of pending tasks associated with this project. if $topLevelOnly is TRUE, then only the top level tasks will be counted
      return count($projectId ? MyProjectVO::getPendingTasksIds($topLevelOnly, $projectId) : $this->getPendingTasksIds($topLevelOnly));
      ]]></introduction>
      
      <introduction key="getPendingTasksIds" class="vo" type="method" value="&amp; getPendingTasksIds($topLevelOnly=TRUE, $projectId=NULL)"><![CDATA[
      // returns the ids of the pending tasks associated with this project. if $topLevelOnly is TRUE, then only the top level tasks will be returned
      // this method can also be invoked statically if $projectId is specified
      $projectId = $projectId ? $projectId : $this->getProjectId();
      $db =& SRA_Controller::getAppDb();
      $results =& $db->fetch('SELECT task_id FROM my_project_task WHERE project_id=' . $db->convertInt($projectId) . ' AND status IN ("active", "wait", "hold")' . ($topLevelOnly ? ' AND parent IS NULL' : ''), array(SRA_DATA_TYPE_INT));
      $ids = array();
      while($row =& $results->next()) {
        $ids[] = $row[0];
      }
      return $ids;
      ]]></introduction>
      
      <introduction key="getProjectTemplate" class="vo" type="method" value="&amp; getProjectTemplate($projectId=NULL)"><![CDATA[
      // returns the MyProjectsTemplate corresponding with this project where 
      // applicable. this method can also be invoked statically using the 
      // $projectId parameter
      static $_myProjectsCachedTemplates = array();
      $useThis = !$projectId ? TRUE : FALSE;
      $projectId = $projectId ? $projectId : $this->getProjectId();
      if (!isset($_myProjectsCachedTemplates[$projectId])) {
        $template = $useThis ? $this->getTemplate() : SRA_Database::getQueryValue(SRA_Controller::getAppDb(), 'SELECT template FROM my_project WHERE project_id=' . $projectId);
        if ($template && MyProjectsTemplate::isValid($tpl =& MyProjectsTemplate::getAppTemplate($template))) {
          $_myProjectsCachedTemplates[$projectId] =& $tpl;
        }
        else {
          $_myProjectsCachedTemplates[$projectId] = FALSE;
        }
      }
      return $_myProjectsCachedTemplates[$projectId];
      ]]></introduction>
      
      <introduction key="getProjectTemplateResources" class="vo" type="method" value="&amp; getProjectTemplateResources($projectId=NULL)"><![CDATA[
      // returns the resource bundle corresponding with this project's template
      // where applicable. this method can also be invoked statically using the 
      // $projectId parameter
      static $_myProjectsCachedTemplateResources = array();
      $useThis = !$projectId ? TRUE : FALSE;
      $projectId = $projectId ? $projectId : $this->getProjectId();
      if (!isset($_myProjectsCachedTemplateResources[$projectId])) {
        if ($useThis) {
          $template =& $this->getProjectTemplate($projectId);
        }
        else {
          $template =& MyProjectVO::getProjectTemplate($projectId);
        }
        if (MyProjectsTemplate::isValid($template)) {
          $_myProjectsCachedTemplateResources[$projectId] =& $template->getRb();
        }
        else {
          $_myProjectsCachedTemplateResources[$projectId] = FALSE;
        }
      }
      return $_myProjectsCachedTemplateResources[$projectId];
      ]]></introduction>
      
      <introduction key="getType" class="vo" type="method" value="getType()"><![CDATA[
      // returns the project type (type identifier from the project template) if 
      // applicable
      return $template =& $this->getProjectTemplate() ? $template->getType() : NULL;
      ]]></introduction>
      
      <introduction key="getUserPermissions" class="vo" type="method" value="getUserPermissions($projectId=FALSE, $uid=NULL)"><![CDATA[
      // returns the user permissions to the project specified by $projectId OR 
      // for this project if the method is invoked non-statically and $projectId 
      // is not specified. If $uid is specified, permissions for that uid will 
      // be returned, otherwise, permissions for the current active user will 
      // be returned
      static $_userProjectPermissions = array();
      
      if (!$uid) {
        global $user;
      }
      else {
        $dao =& SRA_DaoFactory::getDao('OsUser');
        $user =& $dao->findByPk($uid);
      }
      
      $projectId = $projectId ? $projectId : ($this && $this->_projectId ? $this->_projectId : NULL);
      if ($projectId && $user && !isset($_userProjectPermissions[$projectId . '_' . $user->getUid()])) {
        $userPermissions = 0;
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT m.creator, p.id, p.permissions, p.is_group FROM my_project m LEFT JOIN my_project_participant p ON m.project_id=p.project_id WHERE m.project_id=' . $projectId, array('int', 'int', 'int', 'boolean'));
        
        // first check user specific permissions
        $uids = $user->getAllUids();
        while($row =& $results->next()) {
          if (in_array($row[0], $uids)) {
            $userPermissions = MY_PROJECT_PERMISSIONS_ADMIN;
            break;
          }
          if (!$creatorUids) {
            $dao =& SRA_DaoFactory::getDao('OsUser');
            $creator =& $dao->findByPk($row[0]);
            $creatorUids = $creator->getAllUids();
          }
          if (!$row[3] && (($row[1] && in_array($row[1], $uids)) || (!$row[1] && in_array($user->getUid(), $creatorUids)))) {
            $userPermissions = $userPermissions | $row[2];
          }
        }
        
        // next check group permissions
        $results->reset();
        $gids = $user->getAllGids();
        while($row =& $results->next()) {
          if ($row[3] && in_array($row[1], $gids)) {
            $userPermissions = $userPermissions | $row[2];
          }
        }
        $_userProjectPermissions[$projectId . '_' . $user->getUid()] = $userPermissions;
      }
      return $projectId && $user && isset($_userProjectPermissions[$projectId . '_' . $user->getUid()]) ? $_userProjectPermissions[$projectId . '_' . $user->getUid()] : 0;
      ]]></introduction>
      
      <introduction key="getWf" class="vo" type="method" value="&amp; getWf($projectId=NULL)"><![CDATA[
      // returns the workflow instance associated with this project if applicable
      // this method can be invoked statically or as part of an instance. when 
      // invoked statically, the $projectId parameter MUST be specified
      $wfId = NULL;
      if ($projectId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT wf_id FROM my_project WHERE project_id=' . $db->convertInt($projectId), array(SRA_DATA_TYPE_INT));
        if ($results->count()) {
          $row =& $results->next();
          $wfId = $row[0];
        }
      }
      else if ($this && $this->getWfId()) {
        $wfId = $this->getWfId();
      }
      $nl = NULL;
      return $wfId ? SRA_WorkflowManager::resumeWorkflow($wfId) : $nl;
      ]]></introduction>
      
      <introduction key="getWfViewTpl" class="vo" type="method" value="getWfViewTpl()"><![CDATA[
      // returns the _wfViewTpl value from this project template
      return $template =& $this->getProjectTemplate() ? $template->getWfViewTpl() : NULL;
      ]]></introduction>
      
      <introduction key="renderWfViewTpl" class="vo" type="method" value="renderWfViewTpl()"><![CDATA[
      // renders the _wfViewTpl and returns the results. returns NULL if no 
      // template exists
      $wfViewTpl = '';
      if ($this->getWfId() && $this->getWfParams() && $this->getWfViewTpl()) {
        $tpl =& SRA_Controller::getAppTemplate();
        $tpl->assignByRef('project', $this);
        if ($wfParams = $this->getWfParams()) {
          $wfParams = unserialize($this->getWfParams());
          $keys = array_keys($wfParams);
          foreach($keys as $key) {
            $tpl->assign($key, $wfParams[$key]);
          }
        }
        $wfViewTpl = $tpl->fetch($this->getWfViewTpl());
      }
      return $wfViewTpl;
      ]]></introduction>
      
      <introduction key="hasPendingTasks" class="vo" type="method" value="hasPendingTasks()"><![CDATA[
      // returns true if this project current has any pending tasks
      return $this->recordExists && SRA_Database::getRecordCount(SRA_Controller::getAppDb(), 'SELECT task_id FROM my_project_task WHERE project_id=' . $this->getPrimaryKey() . ' AND status IN ("active", "wait", "hold")') > 0;
      ]]></introduction>
      
      <introduction key="isBeingDeleted" class="vo" type="method" value="isBeingDeleted($projectId)"><![CDATA[
      // static method that returns true if the project identified by $projectId
      // is currently being deleted
      global $_myProjectsDeleting;
      return $projectId && $_myProjectsDeleting && $_myProjectsDeleting[$projectId];
      ]]></introduction>
      
      <introduction key="isCompleted" class="vo" type="method" value="isCompleted()"><![CDATA[
      // returns TRUE if this project status is completed
      return $this->isStatusCompleted($this->getStatus());
      ]]></introduction>
      
      <introduction key="isLate" class="vo" type="method" value="isLate()"><![CDATA[
      // returns TRUE if this project has a due date and it is currently past 
      // that date
      return !$this->isCompleted() && ($dueDate =& $this->getDueDate()) && $dueDate->isPast();
      ]]></introduction>
      
      <introduction key="isStatusCompleted" class="vo" type="method" value="isStatusCompleted($status)"><![CDATA[
      // returns TRUE if the $status specified is a completed status
      return $status == MY_PROJECT_STATUS_COMPLETED;
      ]]></introduction>
      
      <introduction key="isStatusTerminal" class="vo" type="method" value="isStatusTerminal($status)"><![CDATA[
      // returns TRUE if the $status specified is a terminal status
      return $status == MY_PROJECT_STATUS_CANCELLED || $status == MY_PROJECT_STATUS_COMPLETED || $status == MY_PROJECT_STATUS_ERROR;
      ]]></introduction>
      
      <introduction key="isTerminal" class="vo" type="method" value="isTerminal()"><![CDATA[
      // returns TRUE if this project status is terminal
      return $this->isStatusTerminal($this->getStatus());
      ]]></introduction>
      
      <introduction key="isUpcoming" class="vo" type="method" value="isUpcoming()"><![CDATA[
      // returns TRUE if this project has a due date and it is currently within 
      // the user's upcoming threshold
      global $user;
      return !$this->isCompleted() && $user && ($dueDate =& $this->getDueDate()) && $user->isInMyProjectsUpcomingThreshold($dueDate);
      ]]></introduction>
      
      <introduction key="rebuildSearchIndex" class="vo" type="method" value="rebuildSearchIndex($projectId, $queue=TRUE)"><![CDATA[
      // static method used to rebuild the search index of the project specified by $projectId
      // if $queue is TRUE (default), the rebuild operation will be delayed until 
      // completion of the current PHP process
      static $_rebuildQueued = array();
      
      if (!$projectId) { return; }
      
      if ($queue) {
        if (!isset($_rebuildQueued[$projectId])) {
          $_rebuildQueued[$projectId] = TRUE;
          $className = 'MyProjectVO';
          SRA_Controller::registerShutdownMethod($className, 'rebuildSearchIndex', array($projectId, FALSE));
        }
        return;
      }
      
      if (isset($_rebuildQueued[$projectId])) { unset($_rebuildQueued[$projectId]); }
      $db =& SRA_Controller::getAppDb();
      $query = 'SELECT last_updated_by, name, summary, template, wf_params FROM my_project WHERE project_id=' . $db->convertInt($projectId);
      $results =& $db->fetch($query);
      if ($results->count()) {
        $row =& $results->next();
        $searchIndex = $row[0] . ' ' . $row[1] . ' ' . $row[2];
        if ($row[3] && MyProjectsTemplate::isValid($template =& MyProjectsTemplate::getAppTemplate($row[3]))) { $searchIndex .= ' ' . $template->getType(); }
        if ($row[4]) {
          $wfParams = unserialize($row[4]);
          foreach($wfParam as $param) {
            if (!$params) { continue; }
            $searchIndex .= ' ' . $params;
          }
        }
        
        $results =& $db->fetch('SELECT comment, last_updated_by FROM my_project_comment WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT email, name FROM my_project_email_participant WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT name FROM my_project_file WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT name FROM my_project_file_category WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT message, title FROM my_project_message WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT name FROM my_project_message_category WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT description, title FROM my_project_task WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        $results =& $db->fetch('SELECT title FROM my_project_whiteboard WHERE project_id=' . $projectId);
        while($row =& $results->next()) {
          $searchIndex .= SRA_Util::implodeSkipEmpty(' ', $row, TRUE);
        }
        if (SRA_Database::getRecordCount($db, 'SELECT project_id FROM my_project_search_index WHERE project_id=' . $projectId)) {
          $db->execute('UPDATE my_project_search_index SET search_index=' . $db->convertText($searchIndex) . ' WHERE project_id=' . $projectId);
        }
        else {
          $db->execute('INSERT INTO my_project_search_index (project_id, search_index) VALUES (' . $projectId . ', ' . $db->convertText($searchIndex) . ')');
        }
      }
      ]]></introduction>
      
      <introduction key="verifyPermissions" class="vo" type="method" value="verifyPermissions($permissions=0, $projectId=FALSE, $participantIdRestriction=NULL, $strictPermissions=FALSE)"><![CDATA[
      // verifies that the current user has $permissions to the project 
      // identified by $projectId. $permissions is a bitmask containing 0..* of 
      // the MY_PROJECT_PERMISSIONS_* bits set determining the desired 
      // permissions. for performance reasons, this method is static and does 
      // not utilize the standard entity model vo/daos. if the global variable 
      // $skipPermissionVerification is TRUE, this method will always return 
      // true. if $creator is a uid of the current user TRUE will be returend. 
      // if $participantIdRestriction is specified, then only that 
      // MyProjectParticipant record will be evaluated. if $strictPermissions 
      // and $participantIdRestriction are both specified, then the permissions 
      // will be enforced strictly, meaning that ONLY $participantIdRestriction 
      // may be granted the permissions specified (not even the creator will be 
      // allowed). if this method is called within an instance of MyProject, AND 
      // $projectId is not specified, then the project to be evaluated will be 
      // the project instance the method is invoked in
      global $skipPermissionVerification;
      if ($skipPermissionVerification) { return TRUE; }
      global $user;
      static $_cachedVerifiedPermissions = array();
      
      $projectId = $projectId ? $projectId : ($this && $this->_projectId ? $this->_projectId : NULL);
      $strict = $strictPermissions && $participantIdRestriction;
      $userPermissions = 0;
      $key = NULL;
      if ($projectId && $user) {
        
        // cache permissions query
        $key = $user->getUid() . '_' . $projectId . '_' . $permissions . '_' . $participantIdRestriction . '_' . $strictPermissions;
        if (isset($_cachedVerifiedPermissions[$key])) { return $_cachedVerifiedPermissions[$key]; }
        
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT m.creator, p.id, p.permissions, p.is_group FROM my_project m LEFT JOIN my_project_participant p ON m.project_id=p.project_id WHERE m.project_id=' . $projectId . ($participantIdRestriction ? ' AND p.participant_id=' . $participantIdRestriction : ''), array('int', 'int', 'int', 'boolean'));
        
        // first check user specific permissions
        $uids = $user->getAllUids();
        while($row =& $results->next()) {
          if (!$strict && in_array($row[0], $uids)) {
            $userPermissions = MY_PROJECT_PERMISSIONS_ADMIN;
            break;
          }
          if (!$strict && !$creatorUids) {
            $dao =& SRA_DaoFactory::getDao('OsUser');
            $creator =& $dao->findByPk($row[0]);
            $creatorUids = $creator->getAllUids();
          }
          if (!$row[3] && (($row[1] && in_array($row[1], $uids)) || (!$strict && !$row[1] && in_array($user->getUid(), $creatorUids)))) {
            $userPermissions = $userPermissions | $row[2];
          }
        }
        
        if (!$permissions || ($permissions & $userPermissions) != $permissions) {
          // next check group permissions
          $results->reset();
          $gids = $user->getAllGids();
          while($row =& $results->next()) {
            if ($row[3] && in_array($row[1], $gids)) {
              $userPermissions = $userPermissions | $row[2];
            }
          }
        }
      }
      $results = (!$permissions && $userPermissions) || ($permissions && (($permissions & $userPermissions) == $permissions));
      if ($key) { $_cachedVerifiedPermissions[$key] = $results; }
      return $results;
      ]]></introduction>
      
      <introduction key="includeMyProjectsTemplate" class="dao" type="include" value="plugins/productivity/MyProjectsTemplate.php" />
      <introduction key="includeCore_Services" class="vo" type="include" value="plugins/core/Core_Services.php" />
      <introduction key="MY_PROJECT_DEFAULT_ICON_URI" class="vo" type="constant" value="MY_PROJECT_DEFAULT_ICON_URI='plugins/productivity/icons/${size}/my-projects.png'" />
      <introduction key="MY_PROJECT_PERMISSIONS_FILES_READ" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_FILES_READ=1" />
      <introduction key="MY_PROJECT_PERMISSIONS_FILES_WRITE" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_FILES_WRITE=3" />
      <introduction key="MY_PROJECT_PERMISSIONS_MESSAGES_READ" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_MESSAGES_READ=4" />
      <introduction key="MY_PROJECT_PERMISSIONS_MESSAGES_WRITE" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_MESSAGES_WRITE=12" />
      <introduction key="MY_PROJECT_PERMISSIONS_TASKS_READ" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_TASKS_READ=16" />
      <introduction key="MY_PROJECT_PERMISSIONS_TASKS_WRITE" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_TASKS_WRITE=48" />
      <introduction key="MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ=64" />
      <introduction key="MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE=192" />
      <introduction key="MY_PROJECT_PERMISSIONS_FULL_PARTICIPANT" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_FULL_PARTICIPANT=255" />
      <introduction key="MY_PROJECT_PERMISSIONS_ADMIN" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_ADMIN=511" />
      <introduction key="MY_PROJECT_PERMISSIONS_EMAIL_MAX_PERMISSIONS" class="vo" type="constant" value="MY_PROJECT_PERMISSIONS_EMAIL_MAX_PERMISSIONS=60" />
      <introduction key="MY_PROJECT_STATUS_ACTIVE" class="vo" type="constant" value="MY_PROJECT_STATUS_ACTIVE='active'" />
      <introduction key="MY_PROJECT_STATUS_CANCELLED" class="vo" type="constant" value="MY_PROJECT_STATUS_CANCELLED='cancelled'" />
      <introduction key="MY_PROJECT_STATUS_COMPLETED" class="vo" type="constant" value="MY_PROJECT_STATUS_COMPLETED='completed'" />
      <introduction key="MY_PROJECT_STATUS_ERROR" class="vo" type="constant" value="MY_PROJECT_STATUS_ERROR='error'" />
      <introduction key="MY_PROJECT_STATUS_HOLD" class="vo" type="constant" value="MY_PROJECT_STATUS_HOLD='hold'" />
    </aop>
    <attribute key="projectId" sequence="1" />
    <attribute key="archived" type="boolean">
      <view key="view" extends="text-yes-no" />
    </attribute>
    <attribute key="completeConfirm" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="dueDate" date-format="m/d/Y" type="date">
      <view key="view" extends="date" />
    </attribute>
    <attribute key="dueDateFixed" type="boolean" />
    <attribute key="emailParticipants" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectEmailParticipant" />
    <attribute key="ended" type="date" />
    <attribute key="fileCategories" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectFileCategory" />
    <attribute key="files" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="last_updated DESC" type="MyProjectFile" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="messageCategories" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectMessageCategory" />
    <attribute key="messages" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="last_updated DESC" type="MyProjectMessage" />
    <attribute key="name" depends="required" max-length="255" set-convert="strip_tags" />
    <attribute key="notifySubject" />
    <attribute key="notifyTpl" />
    <attribute key="notifyTplHtml" />
    <attribute key="participants" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectParticipant" />
    <attribute key="searchIndex" max-length="4294967295" table="my_project_search_index" />
    <attribute key="status" default="active" depends="option" max-length="16">
      <var key="options" value="text.status.active=active text.status.hold=hold text.status.completed=completed text.status.cancelled=cancelled text.status.error=error" />
      <view key="view" extends="option" />
    </attribute>
    <attribute key="summary" set-convert="strip_tags" sync-attributes="summaryHtml" />
    <attribute key="summaryHtml" set-convert="Core_Services_wikiToHtml" />
    <attribute key="tasks" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="last_updated DESC" type="MyProjectTask" />
    <attribute key="template" max-length="64" />
    <attribute key="whiteboards" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="last_updated DESC" type="MyProjectWhiteboard" />
    <attribute key="wfId" type="int" />
    <attribute key="wfParams" max-length="65535" />
    
    <view key="print" template="plugins/productivity/my-projects-print.tpl" />
  </entity>
  
  <entity key="MyProjectComment" primary-key="commentId" render-append="isUserReadOnly">
    <ajax-service key="myProjectCommentService" create="1" delete="1" />
    <aop>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['comment']))) { 
        MyProjectVO::rebuildSearchIndex($record->getProjectId());
        // update message or whiteboard this comment pertains to
        if ($record->getMessageId() || $record->getWhiteboardId()) {
          $this->_db->execute('UPDATE ' . ($record->getMessageId() ? 'my_project_message' : 'my_project_whiteboard') . 
                              ' SET last_updated=' . $this->_db->convertDate($record->getLastUpdated()) . ', last_updated_by=' . $this->_db->convertText($record->getLastUpdatedBy()) . 
                              ' WHERE ' . ($record->getMessageId() ? 'message_id=' . $record->getMessageId() : 'whiteboard_id=' . $record->getWhiteboardId()));
        }
      }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      if ($this->recordExists && !MyProjectVO::verifyPermissions($this->getMessageId() ? MY_PROJECT_PERMISSIONS_MESSAGES_READ : MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectCommentVO: Error - Invalid attempt to access ' . ($this->getMessageId() ? 'message' : 'whiteboard') . ' comment ' . $this->getPrimaryKey() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user; ]]></aspect>
      <aspect key="sendSubscriberEmails" pointcut="dao.insert" when="after"><![CDATA[
      if ($inserted) { MyProjectsManager::_sendSubscriberEmails($record); }
      ]]></aspect>
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
        else if ($this->_skipPermissionsCheck && !$this->recordExists) {
          $this->setLastUpdatedBy($this->getCreatorName() ? $this->getCreatorName() : $this->getCreatorEmail());
        }
      }
      ]]></aspect>
      <aspect key="setProjectId" pointcut="vo.validate"><![CDATA[
      // set project id if not already set and message or whiteboard id has been 
      // set
      if (!$this->validateErrors && !$this->recordExists && !$this->_projectId && ($this->_messageId || $this->_whiteboardId)) {
        $this->setProjectId(SRA_Database::getQueryValue(SRA_Controller::getAppDb(), 'SELECT project_id FROM ' . ($this->_messageId ? 'my_project_message' : 'my_project_whiteboard') . ' WHERE ' . ($this->_messageId ? 'message_id' : 'whiteboard_id') . '=' . ($this->_messageId ? $this->_messageId : $this->_whiteboardId)));
        if ($this->_files) {
          $keys = array_keys($this->_files);
          foreach($keys as $key) {
            $this->_files[$key]->setProjectId($this->_projectId);
          }
        }
      }
      ]]></aspect>
      <aspect key="setProjectIdFiles" pointcut="vo.addFiles"><![CDATA[
      if (is_array($files)) {
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectFileVO::isValid($files)) {
        $files->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if ($record->isUserReadOnly()) {
        SRA_Error::logError('MyProjectFileDAO::delete: Error - Invalid attempt to delete ' . ($record->getMessageId() ? 'message' : 'whiteboard') . ' comment ' . $record->getPrimaryKey() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsComment" advice="verifyReadPermissions" pointcut="vo.getComment" />
      <aspect key="verifyReadPermissionsCommentHtml" advice="verifyReadPermissions" pointcut="vo.getCommentHtml" />
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->validateErrors && $this->recordExists && $this->isDirty()) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectComment.error.readOnly');
      }
      else if (!$this->validateErrors && !$this->_skipPermissionsCheck && !$this->recordExists) {
        $permissions = MyProjectVO::getUserPermissions($this->_projectId);
        $neededPermissions = $this->_messageId ? MY_PROJECT_PERMISSIONS_MESSAGES_WRITE : MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE;
        if (($permissions & $neededPermissions) != $neededPermissions) {
          $resources =& $this->getEntityResources();
          $this->validateErrors[] = $resources->getString('MyProjectComment.error.noWriteAccess', array('type' => $resources->getString($this->_messageId ? 'MyProjectMessage' : 'MyProjectWhiteboard')));
        }
      }
      ]]></aspect>
      
      <introduction key="getCreatorEmail" class="vo" type="method" value="getCreatorEmail()"><![CDATA[
      // returns the from email to use for this comment (depending on whether it 
      // was email or user generated)
      if (!isset($this->_creatorEmail)) {
        if ($this->isEmailGenerated()) {
          $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
          $participant =& $dao->findByPk($this->getCreator());
          $this->_creatorEmail = $participant->getEmail();
        }
        else {
          $this->_creatorEmail = OsUserVO::getEmailFromUid($this->getCreator());
        }
        if (!isset($this->_creatorEmail)) { $this->_creatorEmail = FALSE; }
      }
      return $this->_creatorEmail;
      ]]></introduction>
      <introduction key="getCreatorName" class="vo" type="method" value="getCreatorName()"><![CDATA[
      // returns the from name to use for this comment (depending on whether it 
      // was email or user generated)
      if (!isset($this->_creatorName)) {
        if ($this->isEmailGenerated()) {
          $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
          $participant =& $dao->findByPk($this->getCreator());
          $this->_creatorName = $participant->getName();
        }
        else {
          $this->_creatorName = OsUserVO::getNameFromUid($this->getCreator());
        }
        if (!isset($this->_creatorName)) { $this->_creatorName = FALSE; }
      }
      return $this->_creatorName;
      ]]></introduction>
      <introduction key="getOwner" class="vo" type="method" value="&amp; getOwner()"><![CDATA[
      // returns the owner of this comment (either message or whiteboard)
      $dao =& SRA_DaoFactory::getDao($this->_messageId ? 'MyProjectMessage' : 'MyProjectWhiteboard');
      return $dao->findByPk($this->_messageId ? $this->_messageId : $this->_whiteboardId);
      ]]></introduction>
      <introduction key="getStatusLabel" class="vo" type="method" value="getStatusLabel()"><![CDATA[
      // returns the status label to use for this comment. this label has the 
      // following format: Added by [creator] on [created timestamp]
      return $this->getEntityResourcesString('text.addedBy') . ' ' . $this->getCreatorName() . ' ' . $this->getEntityResourcesString('text.on') . ' ' . $this->getCreated(FALSE, TRUE);
      ]]></introduction>
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($commentId=NULL)"><![CDATA[
      // returns true if this comment is read-only for the current user. only 
      // the original author or a project admin can delete a comment (changes 
      // are not allowed)
      global $user;
      $commentId = $commentId ? $commentId : $this->getCommentId();
      if ($user && $commentId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT creator, project_id FROM my_project_comment WHERE comment_id=' . $db->convertInt($commentId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          return !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_MESSAGES_WRITE, $row[1]) || (!in_array($row[0], $user->getAllUids()) && MyProjectVO::getUserPermissions($row[1]) != MY_PROJECT_PERMISSIONS_ADMIN);
        }
      }
      return TRUE;
      ]]></introduction>
      <introduction key="includeCore_Services" class="vo" type="include" value="plugins/core/Core_Services.php" />
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
      <introduction key="includeMyProjectsManager" class="dao" type="include" value="plugins/productivity/MyProjectsManager.php" />
    </aop>
    <attribute key="commentId" sequence="1" />
    <attribute key="comment" depends="required" max-length="16777215" set-convert="strip_tags" sync-attributes="commentHtml" />
    <attribute key="commentHtml" max-length="16777215" set-convert="Core_Services_wikiToHtml" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="emailGenerated" default="FALSE" type="boolean" />
    <attribute key="files" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectFile" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="messageId" type="int" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="whiteboardId" type="int" />
    
    <validate key="ownership" attrs="messageId whiteboardId" resource="MyProjectComment.error.ownership" require-all="0" />
  </entity>
  
  <entity key="MyProjectDiscussionSubscriber" primary-key="subscriberId" render-append="getLabel">
    <aop>
      <introduction key="canAddComments" class="vo" type="method" value="canAddComments()"><![CDATA[
      // message is new, so user is author and can add comments
      if (!$this->getProjectId()) { return TRUE; }
      
      // returns true if this subscriber can add comments to the discussion
      if ($this->_uid) {
        $permissions = MyProjectVO::getUserPermissions($this->getProjectId(), $this->_uid);
      }
      else {
        $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
        $participant =& $dao->findByPk($this->getParticipantId());
        $permissions = $participant->getPermissions();
      }
      return ($permissions & MY_PROJECT_PERMISSIONS_MESSAGES_WRITE) == MY_PROJECT_PERMISSIONS_MESSAGES_WRITE;
      ]]></introduction>
      <introduction key="getEmail" class="vo" type="method" value="getEmail()"><![CDATA[
      // returns the email address for this subscriber
      if ($this->getUid()) {
        $email = OsUserVO::getEmailFromUid($this->getUid());
      }
      else {
        $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
        $participant =& $dao->findByPk($this->getParticipantId());
        $email = $participant->getEmail();
      }
      return $email;
      ]]></introduction>
      <introduction key="getLabel" class="vo" type="method" value="getLabel()"><![CDATA[
      // returns the label to use to represent this subscriber
      if ($this->getUid()) {
        $label = OsUserVO::getNameFromUid($this->getUid());
      }
      else {
        $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
        $participant =& $dao->findByPk($this->getParticipantId());
        $label = $participant->getLabel();
      }
      return $label;
      ]]></introduction>
      <introduction key="getName" class="vo" type="method" value="getName()"><![CDATA[
      // returns the name to use to represent this subscriber
      if ($this->getUid()) {
        $name = OsUserVO::getNameFromUid($this->getUid());
      }
      else {
        $dao =& SRA_DaoFactory::getDao('MyProjectEmailParticipant');
        $participant =& $dao->findByPk($this->getParticipantId());
        $name = $participant->getName();
      }
      return $name;
      ]]></introduction>
      <introduction key="getProjectId" class="vo" type="method" value="getProjectId()"><![CDATA[
      // load message/whiteboard id if not already loaded
      if (!$this->_messageId && !$this->_whiteboardId && $this->_subscriberId) {
        $db =& SRA_Controller::getAppDb();
        if (SRA_ResultSet::isValid($results =& $db->fetch('SELECT message_id, whiteboard_id FROM my_project_discussion_subscriber WHERE subscriber_id=' . $this->getAttrDbValue(), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT))) && $results->count()) {
          if ($row =& $results->next()) {
            $this->_messageId = $row[0];
            $this->_whiteboardId = $row[1];
          }
        }
      }
      
      // returns the project id for this subscription
      if (!$this->_projectId && ($this->_messageId || $this->_whiteboardId)) {
        $this->_projectId = SRA_Database::getQueryValue(SRA_Controller::getAppDb(), 'SELECT project_id FROM ' . ($this->_messageId ? 'my_project_message' : 'my_project_whiteboard') . ' WHERE ' . ($this->_messageId ? 'message_id' : 'whiteboard_id') . '=' . ($this->_messageId ? $this->_messageId : $this->_whiteboardId));
      }
      return $this->_projectId;
      ]]></introduction>
      <introduction key="getUnsubscribeLink" class="vo" type="method" value="getUnsubscribeLink()"><![CDATA[
      // returns the unsubscribe link to use for this subscriber
      $id = $this->_messageId ? 'm' . $this->_messageId : 'w' . $this->_whiteboardId;
      $pid = $this->_participantId ? $this->_participantId : 'u' . $this->_uid;
      return SRA_Controller::getRequestUri() . '/plugins/productivity/unsubscribe/' . (SRA_Controller::getAppParams('unsubscribeRewrite', 'my-projects') ? $id . '/' . $pid : '?id=' . $id . '&pid=' . $pid);
      ]]></introduction>
    </aop>
    <attribute key="subscriberId" sequence="1" />
    <attribute key="participantId" type="int" />
    <attribute key="messageId" type="int" />
    <attribute key="uid" type="int" />
    <attribute key="whiteboardId" type="int" />
    <validate key="participantOrUidRequired" attrs="participantId uid" mandatory="1" resource="MyProjectDiscussionSubscriber.error.participantOrUidRequired" require-all="0" />
  </entity>
  
  <entity key="MyProjectEmailParticipant" primary-key="participantId" render-append="getLabel getPermissionsDescription">
    <aop>
      <advice key="sendIntroEmail"><![CDATA[
      // send introduction email
      if ($record && $record->isDirty('sendIntroEmail') && $record->isSendIntroEmail() && $record->validate()) { MyProjectsManager::_sendParticipantIntroEmail($record); }
      ]]></advice>
      
      <aspect key="removeChangeRestrictions" pointcut="dao.delete" when="after"><![CDATA[
      if ($deleted && $deleteRecordId) {
        $results =& $this->_db->fetch('SELECT comment_id, message_id, whiteboard_id FROM my_project_comment WHERE creator=' . $this->_db->convertInt($deleteRecordId) . ' AND email_generated=' . $this->_db->convertBoolean(TRUE), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT));
        while($row =& $results->next()) {
          $this->_db->execute('UPDATE my_project_comment SET creator=' . 
                              $this->_db->convertInt(SRA_Database::getQueryValue($this->_db, 'SELECT creator FROM ' . 
                              ($row[1] ? 'my_project_message' : 'my_project_whiteboard') . ' WHERE ' . 
                              ($row[1] ? 'message_id' : 'whiteboard_id') . '=' . 
                              $this->_db->convertInt($row[1] ? $row[1] : $row[2]), SRA_DATA_TYPE_INT)) . ', 
                              email_generated=' . $this->_db->convertBoolean(FALSE) . ' WHERE comment_id=' . $row[0]);
        }
        $this->_db->execute('UPDATE my_project_task SET change_restriction=' . $this->_db->convertInt(NULL) . ' WHERE change_restriction=' . $deleteRecordId . ' AND change_restriction_email=' . $this->_db->convertBoolean(TRUE));
      }
      ]]></aspect>
      <aspect key="sendIntroEmailInsert" advice="sendIntroEmail" pointcut="dao.insert" />
      <aspect key="sendIntroEmailUpdate" advice="sendIntroEmail" pointcut="dao.update" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $record->getProjectId())) {
        SRA_Error::logError('MyProjectParticipantDAO::delete: Error - Invalid attempt to delete participant ' . $record->getId() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyAdminPermissions" pointcut="vo.validate" when="after"><![CDATA[
      if ($this->getProjectId() && !$this->validateErrors && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $this->getProjectId())) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProject.error.notAdmin');
      }
      ]]></aspect>
      
      <introduction key="getLabel" class="vo" type="method" value="getLabel()"><![CDATA[
      // returns the name for this participant
      return $this->getName() ? $this->getName() . ' [' . $this->getEmail() . ']' : $this->getEmail();
      ]]></introduction>
      
      <introduction key="getPermissionsDescription" class="vo" type="method" value="getPermissionsDescription()"><![CDATA[
      // returns a string describing the permissions of this participant
      
      $indiResources =& SRA_ResourceBundle::getBundle('etc/plugins/productivity/l10n/productivity');
      $permissions = '';
      if ($this->_permissions & MY_PROJECT_PERMISSIONS_FILES_WRITE) {
        $permissions = $indiResources->getString('text.permissions.fileWrite');
      }
      else if ($this->_permissions & MY_PROJECT_PERMISSIONS_FILES_READ) {
        $permissions = $indiResources->getString('text.permissions.fileRead');
      }
      
      if ($this->_permissions & MY_PROJECT_PERMISSIONS_MESSAGES_WRITE) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.messageWrite');
      }
      else if ($this->_permissions & MY_PROJECT_PERMISSIONS_MESSAGES_READ) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.messageRead');
      }
      
      if ($this->_permissions & MY_PROJECT_PERMISSIONS_TASKS_WRITE) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.taskWrite');
      }
      else if ($this->_permissions & MY_PROJECT_PERMISSIONS_TASKS_READ) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.taskRead');
      }
      
      if ($this->_permissions & MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.whiteboardWrite');
      }
      else if ($this->_permissions & MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ) {
        $permissions .= $permissions != '' ? ', ' : '';
        $permissions .= $indiResources->getString('text.permissions.whiteboardRead');
      }
      return $permissions;
      ]]></introduction>
      
      <introduction key="getPid" class="vo" type="method" value="getPid()"><![CDATA[
      // returns the pid (participant identifier) for this participant
      return 'e' . $this->_participantId;
      ]]></introduction>
      
      <introduction key="includeMyProjectsManager" class="dao" type="include" value="plugins/productivity/MyProjectsManager.php" />
    </aop>
    <attribute key="participantId" sequence="1" />
    <attribute key="email" depends="email required" max-length="255" />
    <attribute key="name" max-length="255" />
    <attribute key="password" depends="required" min-length="6" max-length="128" />
    <attribute key="permissions" depends="required" type="int" />
    <attribute key="projectId" type="int" />
    <attribute key="sendIntroEmail" skip-persistence="1" type="boolean" />
    <attribute key="subscriptions" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectDiscussionSubscriber" />
  </entity>
  
  <entity key="MyProjectFile" primary-key="fileId" render-append="getFileSizeDesc getIconUri isUserReadOnly" render-exclude="file fileIndex iconThumbnail32 iconThumbnail64">
    <ajax-service key="myProjectsFileService" create="1" delete="1" retrieve="0" update="1" />
    <aop>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['name']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      // check if user has read access to the file
      if (!$this->_bypassPermissionsCheck && $this->recordExists && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectFileVO: Error - Invalid attempt to access file ' . $this->getName() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'] . ' with project permissions ' . MyProjectVO::getUserPermissions($this->getProjectId()), __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user; ]]></aspect>
      <aspect key="createVersion" pointcut="dao.update"><![CDATA[
      // create a prior version when the file is being updated
      if ($record->recordExists && $record->getVersioning() && !$record->getVersion()) {
        $record->setVersion($record->getNextVersion());
      }
      if ($record->recordExists && $record->getVersioning() && $record->getRevisionType() && $record->isDirty('file') && $record->validate()) {
        if (!$record->getVersion()) { $record->setVersion($record->getNextVersion()); }
        $version = new MyProjectFileVersionVO(array('created' => $record->getCreated(TRUE), 'changeRestriction' => $record->getAttribute('changeRestriction_participantId'), 'creator' => $record->getCreator(TRUE), 'fileId' => $record->getFileId(), 'lastUpdated' => $record->getLastUpdated(), 'lastUpdatedBy' => $record->getLastUpdatedBy(), 'name' => $record->getName(), 'readOnly' => $record->isReadOnly(), 'version' => $record->getVersion(), 'projectId' => $record->getProjectId()));
        $version->setFile($record->getFile(TRUE));
        $version->insert();
        $record->addVersions($version, FALSE);
        $record->setVersion($record->getNextVersion());
      }
      ]]></aspect>
      <aspect key="removeRevisionTypeError" pointcut="vo.validate" when="after"><![CDATA[
      // don't return revision type errors if versioning is disabled
      if (isset($this->validateErrors['revisionType']) && !$this->getVersioning()) {
        unset($this->validateErrors['revisionType']);
        $this->setRevisionType(NULL);
      }
      ]]></aspect>
      <aspect key="setCategory" pointcut="vo.setCategory"><![CDATA[
      // validate category and convert to label if $category is a categoryId
      $db =& SRA_Controller::getAppDb();
      if ($category && $this->_projectId && !SRA_Database::getRecordCount($db, 'SELECT category_id FROM my_project_file_category WHERE project_id=' . $this->_projectId . ' AND name=' . $db->convertText($category))) {
        $category = is_numeric($category) && ($name = SRA_Database::getQueryValue($db, 'SELECT name FROM my_project_file_category WHERE project_id=' . $this->_projectId . ' AND category_id=' . $category)) ? $name : (SRA_ResourceBundle::isValid($rb =& $this->getEntityResources()) && $rb->containsKey($category) ? $rb->getString($category) : NULL);
      }
      ]]></aspect>
      <aspect key="setDefaultName" pointcut="vo.validate"><![CDATA[
      if (!$this->recordExists && !$this->_name && SRA_FileAttribute::isValid($this->_file)) {
        $this->setName($this->_file->getName());
      }
      ]]></aspect>
      <aspect key="setInitialVersion" pointcut="dao.insert"><![CDATA[
      // set the initial version #
      if (!$record->recordExists && $record->getVersioning()) { $record->setVersion($record->getNextVersion()); }
      ]]></aspect>
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setOldProjectId" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('projectId')) { 
        $oldProjectId = $record->getProjectId(TRUE);
        if ($record->getCategory() && !SRA_Database::getRecordCount($this->_db, 'SELECT category_id FROM my_project_message_category WHERE project_id=' . $record->getProjectId() . ' AND name=' . $this->_db->convertText($record->getCategory()))) { $record->setCategory(NULL); }
        if (!$record->isDirty('changeRestriction')) { $record->setChangeRestriction(); }
        global $_myProjectsCommentUpdatingProjectId;
        if ($record->getCommentId() && (!$_myProjectsCommentUpdatingProjectId || !$_myProjectsCommentUpdatingProjectId[$record->getCommentId()])) { $record->setCommentId(NULL); }
        global $_myProjectsMessageUpdatingProjectId;
        if ($record->getMessageId() && (!$_myProjectsMessageUpdatingProjectId || !$_myProjectsMessageUpdatingProjectId[$record->getMessageId()])) { $record->setMessageId(NULL); }
        global $_myProjectsTaskUpdatingProjectId;
        if ($record->getTaskId() && (!$_myProjectsTaskUpdatingProjectId || !$_myProjectsTaskUpdatingProjectId[$record->getTaskId()])) { $record->setTaskId(NULL); }
      }
      ]]></aspect>
      <aspect key="updateProjectId" pointcut="dao.update" when="after"><![CDATA[
      // project changed, update relational attributes with new project id
      if ($oldProjectId && $updated) {
        $record->_updateProjectId($oldProjectId);
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $record->getProjectId(), $record->getAttribute('changeRestriction_participantId'))) {
        SRA_Error::logError('MyProjectFileDAO::delete: Error - Invalid attempt to delete file ' . $record->getName() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsFile" advice="verifyReadPermissions" pointcut="vo.getFile" />
      <aspect key="verifyReadPermissionsIcon" advice="verifyReadPermissions" pointcut="vo.getIcon" />
      <aspect key="verifyReadPermissionsName" advice="verifyReadPermissions" pointcut="vo.getName" />
      <aspect key="verifyReadPermissionsPreview" advice="verifyReadPermissions" pointcut="vo.getPreview" />
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->_bypassPermissionsCheck && !$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $this->getProjectId(), $this->getAttribute('changeRestriction_participantId'))) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectFile.error.noWriteAccess');
      }
      ]]></aspect>
      
      <introduction key="getFileSizeDesc" class="vo" type="method" value="getFileSizeDesc($size=NULL)"><![CDATA[
      // returns the correct file size label to use for this file. this method 
      // can also be invoked statically using the $size parameter
      return SRA_FileAttribute::getSizeLabel(SRA_FILE_ATTRUBTE_DECIMAL_PRECISION, isset($size) ? $size : (method_exists($this, 'getFileSize') ? $this->getFileSize() : NULL));
      ]]></introduction>
      <introduction key="getIconUri" class="vo" type="method" value="getIconUri($size=16)"><![CDATA[
      // returns the URI to the 16 pixel icon for this file
      return SRA_Controller::getServerUri() . MY_PROJECT_FILE_ICON_BASE_URI . $size . '/' . ($this->_icon ? basename($this->_icon) : 'unknown.png');
      ]]></introduction>
      <introduction key="getNextVersion" class="vo" type="method" value="getNextVersion()"><![CDATA[
      // returns the next version # for this file based on the revision type 
      // specified
      $version = '';
      if ($this->getVersioning()) {
        $versionIds = $this->getVersion() ? explode('.', $this->getVersion()) : array();
        while(count($versionIds) < 3) $versionIds[] = '0';
        $idx = (!$this->getRevisionType() || $this->getRevisionType() > $this->getVersioning() ? $this->getVersioning() : $this->getRevisionType())-1;
        $versionIds[$idx]++;
        for($idx=$idx+1; $idx<count($versionIds); $idx++) $versionIds[$idx] = 0;
        $version = $versionIds[0];
        if ($this->getVersioning() > 1) { $version .= '.' . $versionIds[1]; }
        if ($this->getVersioning() > 2) { $version .= '.' . $versionIds[2]; }
      }
      return $version;
      ]]></introduction>
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($fileId=NULL)"><![CDATA[
      // returns true if this file is read-only for the current user. can be 
      // invoked either statically using the $fileId or within a file instance
      global $user;
      $fileId = $fileId ? $fileId : $this->getFileId();
      if ($user && $fileId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT change_restriction, creator, project_id, read_only FROM my_project_file WHERE file_id=' . $db->convertInt($fileId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          return !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $row[2]) || ($row[3] && !in_array($row[1], $user->getAllUids()) && (!$row[0] || !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $row[2], $row[0], TRUE)));
        }
      }
      return TRUE;
      ]]></introduction>
      <introduction key="getRevisionTypeOptions" class="vo" type="method" value="getRevisionTypeOptions()"><![CDATA[
      $resources =& $this->getEntityResources();
      $options = array();
      if ($this->getVersioning()) {
        if ($this->recordExists) $options[0] = $resources->getString('MyProjectFile.revisionType.0');
        $baseRevisionType = $this->_revisionType;
        if ($this->getVersioning() > 2) { 
          $this->_revisionType = 3;
          $options[3] = $resources->getString('MyProjectFile.revisionType.3', array('version' => $this->getNextVersion())); 
        }
        if ($this->getVersioning() > 1) {
          $this->_revisionType = 2;
          $options[2] = $resources->getString('MyProjectFile.revisionType.2', array('version' => $this->getNextVersion())); 
        }
        $this->_revisionType = 1;
        $options[1] = $resources->getString('MyProjectFile.revisionType.1', array('version' => $this->getNextVersion()));
        $this->_revisionType = $baseRevisionType;
      }
      return $options;
      ]]></introduction>
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
      <introduction key="updateProjectId" class="vo" type="method" value="_updateProjectId($oldProjectId)"><![CDATA[
      global $_myProjectsFileUpdatingProjectId;
      if (!$_myProjectsFileUpdatingProjectId) { $_myProjectsFileUpdatingProjectId = array(); }
      
      if (!$_myProjectsFileUpdatingProjectId[$this->getPrimaryKey()]) {
        $_myProjectsFileUpdatingProjectId[$this->getPrimaryKey()] = TRUE;
        
        // versions
        $versions =& $this->getVersions();
        $keys = array_keys($versions);
        foreach($keys as $key) {
          $versions[$key]->setProjectId($this->getProjectId());
          $versions[$key]->update();
        }
        
        MyProjectVO::rebuildSearchIndex($oldProjectId);
        unset($_myProjectsFileUpdatingProjectId[$this->getPrimaryKey()]);
      }
      ]]></introduction>
      <introduction key="MY_PROJECT_FILE_ICON_BASE_DIR" class="vo" type="constant" value="MY_PROJECT_FILE_ICON_BASE_DIR='/plugins/core/www/icons/mimetypes/'" />
      <introduction key="MY_PROJECT_FILE_ICON_BASE_URI" class="vo" type="constant" value="MY_PROJECT_FILE_ICON_BASE_URI='plugins/core/icons/mimetypes/'" />
    </aop>
    <attribute key="fileId" sequence="1" />
    <attribute key="category" max-length="128" />
    <attribute key="changeRestriction" type="MyProjectParticipant" />
    <attribute key="commentId" column="comment_id" type="int" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="file" depends="required" file-icon-attr="icon" file-index-attr="fileIndex" file-size-attr="fileSize" file-uri-attr="fileUri" is-file="1" lazy-load-exclusive="1" max-length="16777215" type="blob">
      <thumbnail key="iconThumbnail32" height="32" include-types="image.*" preserve-aspect="0" width="32" />
      <thumbnail key="iconThumbnail64" height="64" include-types="image.*" preserve-aspect="0" width="64" />
      <thumbnail key="preview" attr="previewPage" attr-page-num="pageNum" width="250" />
    </attribute>
    <attribute key="fileIndex" depends="required" lazy-load-exclusive="1" max-length="16777215" />
    <attribute key="fileSize" type="float" />
    <attribute key="fileUri" max-length="255" />
    <attribute key="icon" max-length="255" />
    <attribute key="iconThumbnail32" file-uri-attr="iconThumbnail32Uri" is-file="1" lazy-load-exclusive="1" type="blob" />
    <attribute key="iconThumbnail32Uri" max-length="255" />
    <attribute key="iconThumbnail64" file-uri-attr="iconThumbnail64Uri" is-file="1" lazy-load-exclusive="1" type="blob" />
    <attribute key="iconThumbnail64Uri" max-length="255" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="messageId" column="message_id" type="int" />
    <attribute key="name" depends="required" max-length="128" set-convert="strip_tags" />
    <attribute key="preview" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="page_num ASC" type="MyProjectFilePreviewPage" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="readOnly" type="boolean" />
    <attribute key="revisionType" depends="option" type="int" skip-persistence="1">
      <var key="code" value="$options = $this->getRevisionTypeOptions();" />
    </attribute>
    <attribute key="taskId" type="int" />
    <attribute key="version" max-length="7" />
    <attribute key="versioning" default="0" depends="option" type="int">
      <var key="options" value="MyProjectFile.versioning.0=0 MyProjectFile.versioning.3=3 MyProjectFile.versioning.2=2 MyProjectFile.versioning.1=1" />
    </attribute>
    <attribute key="versions" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" order-by="version_id DESC" type="MyProjectFileVersion" />
  </entity>
  
  <entity key="MyProjectFileCategory" primary-key="categoryId">
    <aop>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['name']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      
      <aspect key="deleteCategory" pointcut="dao.delete"><![CDATA[
      if ($record->recordExists) { $this->_db->execute('UPDATE my_project_file SET category=NULL WHERE project_id=' . $record->getProjectId() . ' AND category=' . $this->_db->convertText($record->getName())); }
      ]]></aspect>
      <aspect key="updateCategory" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('name') && $record->validate()) { $this->_db->execute('UPDATE my_project_file SET category=' . $this->_db->convertText($record->getName()) . ' WHERE project_id=' . $record->getProjectId() . ' AND category=' . $this->_db->convertText($record->getName(TRUE))); }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyUniqueCategory" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->recordExists && !$this->validateErrors && $this->isDirty()) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT count(*) FROM my_project_file_category WHERE project_id=' . $this->getProjectId() . ' AND name=' . $db->convertText($this->getName()), array('int'));
        $row =& $results->next();
        if ($row[0]) {
          $resources =& $this->getEntityResources();
          $this->validateErrors['name'] = $resources->getString('MyProjectFileCategory.error.notUnique');
        }
      }
      ]]></aspect>
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $record->getProjectId())) {
        SRA_Error::logError('MyProjectFileCategoryDAO::delete: Error - Invalid attempt to delete file category ' . $record->getName() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $this->getProjectId())) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProject.error.notAdmin');
      }
      ]]></aspect>
      
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
    </aop>
    <attribute key="categoryId" sequence="1" />
    <attribute key="name" depends="required" max-length="128" set-convert="strip_tags" />
    <attribute key="projectId" depends="required" type="int" />
  </entity>
  
  <entity key="MyProjectFilePreviewPage" primary-key="previewPageId" render-exclude="previewPage">
    <attribute key="previewPageId" sequence="1" />
    <attribute key="pageNum" type="int" />
    <attribute key="previewPage" file-uri-attr="previewPageUri" is-file="1" lazy-load-exclusive="1" max-length="2097152" type="blob" />
    <attribute key="previewPageUri" max-length="255" />
  </entity>
  
  <entity key="MyProjectFileVersion" primary-key="versionId" render-append="getIconUri isUserReadOnly" render-exclude="file fileIndex iconThumbnail32 iconThumbnail64">
    <aop>
      <advice key="verifyReadPermissions"><![CDATA[
      if ($this->recordExists && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectFileVersionVO: Error - Invalid attempt to access file ' . $this->getPrimaryKey() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setOldProjectId" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('projectId')) { 
        $oldProjectId = $record->getProjectId(TRUE);
        if (!$record->isDirty('changeRestriction')) { $record->setChangeRestriction(); }
      }
      ]]></aspect>
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $record->getProjectId(), $record->getAttribute('changeRestriction_participantId'))) {
        SRA_Error::logError('MyProjectFileVersionDAO::delete: Error - Invalid attempt to delete file ' . $record->getName() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsFile" advice="verifyReadPermissions" pointcut="vo.getFile" />
      <aspect key="verifyReadPermissionsIcon" advice="verifyReadPermissions" pointcut="vo.getIcon" />
      <aspect key="verifyReadPermissionsName" advice="verifyReadPermissions" pointcut="vo.getName" />
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $this->getProjectId(), $this->getAttribute('changeRestriction_participantId'))) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectFile.error.noWriteAccess');
      }
      ]]></aspect>
      
      <introduction key="getIconUri" class="vo" type="method" value="getIconUri($size=16)"><![CDATA[
      // returns the URI to the 16 pixel icon for this file
      return $this->_icon ? SRA_Controller::getServerUri() . MY_PROJECT_FILE_ICON_BASE_URI . $size . '/' . basename($this->_icon) : NULL;
      ]]></introduction>
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($versionId=NULL)"><![CDATA[
      // returns true if this file version is read-only for the current user. can be 
      // invoked either statically using the $versionId or within a version instance
      global $user;
      $versionId = $versionId ? $versionId : $this->getVersionId();
      if ($user && $versionId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT change_restriction, creator, project_id, read_only FROM my_project_file_version WHERE version_id=' . $db->convertInt($versionId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          return !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $row[2]) || ($row[3] && !in_array($row[1], $user->getAllUids()) && (!$row[0] || !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_FILES_WRITE, $row[2], $row[0], TRUE)));
        }
      }
      return TRUE;
      ]]></introduction>
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
    </aop>
    <attribute key="versionId" sequence="1" />
    <attribute key="changeRestriction" type="MyProjectParticipant" />
    <attribute key="created" depends="required" type="time" />
    <attribute key="creator" depends="required" type="int" />
    <attribute key="file" depends="required" file-icon-attr="icon" file-index-attr="fileIndex" file-size-attr="fileSize" file-uri-attr="fileUri" is-file="1" lazy-load-exclusive="1" max-length="16777215" type="blob">
      <thumbnail key="iconThumbnail32" height="32" include-types="image.*" preserve-aspect="0" width="32" />
      <thumbnail key="iconThumbnail64" height="64" include-types="image.*" preserve-aspect="0" width="64" />
    </attribute>
    <attribute key="fileId" depends="required" type="int" />
    <attribute key="fileIndex" depends="required" lazy-load-exclusive="1" max-length="16777215" />
    <attribute key="fileSize" type="float" />
    <attribute key="fileUri" max-length="255" />
    <attribute key="icon" max-length="255" />
    <attribute key="iconThumbnail32" file-uri-attr="iconThumbnail32Uri" is-file="1" lazy-load-exclusive="1" type="blob" />
    <attribute key="iconThumbnail32Uri" max-length="255" />
    <attribute key="iconThumbnail64" file-uri-attr="iconThumbnail64Uri" is-file="1" lazy-load-exclusive="1" type="blob" />
    <attribute key="iconThumbnail64Uri" max-length="255" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="name" depends="required" max-length="128" set-convert="strip_tags" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="readOnly" type="boolean" />
    <attribute key="version" max-length="7" />
  </entity>
  
  <entity key="MyProjectMessage" render-append="getCreatorName isUserReadOnly" primary-key="messageId">
    <ajax-service key="myProjectMessagePrint" limit="1" raw="1" view="print" />
    <ajax-service key="myProjectMessageService" create="1" delete="1" update="1" />
    <aop>
      <advice key="sendSubscriberEmails"><![CDATA[
      if ($inserted || ($updated && isset($oldDirtyFlags['message']))) { MyProjectsManager::_sendSubscriberEmails($record, $updated); }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      if ($this->recordExists && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_MESSAGES_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectMessageVO: Error - Invalid attempt to access message ' . $this->getPrimaryKey() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['message']) || isset($oldDirtyFlags['title']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user; ]]></aspect>
      <aspect key="sendSubscriberEmailsInsert" advice="sendSubscriberEmails" pointcut="dao.insert" when="after" />
      <aspect key="sendSubscriberEmailsUpdate" advice="sendSubscriberEmails" pointcut="dao.update" when="after" />
      <aspect key="setCategory" pointcut="vo.setCategory"><![CDATA[
      // validate category and convert to label if $category is a categoryId
      $db =& SRA_Controller::getAppDb();
      if ($category && $this->_projectId && !SRA_Database::getRecordCount($db, 'SELECT category_id FROM my_project_message_category WHERE project_id=' . $this->_projectId . ' AND name=' . $db->convertText($category))) {
        $category = is_numeric($category) && ($name = SRA_Database::getQueryValue($db, 'SELECT name FROM my_project_message_category WHERE project_id=' . $this->_projectId . ' AND category_id=' . $category)) ? $name : (SRA_ResourceBundle::isValid($rb =& $this->getEntityResources()) && $rb->containsKey($category) ? $rb->getString($category) : NULL);
      }
      ]]></aspect>
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setMessageIdSubscribers" pointcut="vo.addSubscribers"><![CDATA[
      if (is_array($subscribers)) {
        $keys = array_keys($subscribers);
        foreach($keys as $key) {
          $subscribers[$key]->setMessageId($this->getMessageId());
        }
      }
      else if (MyProjectDiscussionSubscriberVO::isValid($subscribers)) {
        $subscribers->setMessageId($this->getMessageId());
      }
      ]]></aspect>
      <aspect key="setOldProjectId" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('projectId')) { 
        $oldProjectId = $record->getProjectId(TRUE);
        if ($record->getCategory() && !SRA_Database::getRecordCount($this->_db, 'SELECT category_id FROM my_project_message_category WHERE project_id=' . $record->getProjectId() . ' AND name=' . $this->_db->convertText($record->getCategory()))) { $record->setCategory(NULL); }
        global $_myProjectsTaskUpdatingProjectId;
        if ($record->getTaskId() && (!$_myProjectsTaskUpdatingProjectId || !$_myProjectsTaskUpdatingProjectId[$record->getTaskId()])) { $record->setTaskId(NULL); }
      }
      ]]></aspect>
      <aspect key="setProjectIdComments" pointcut="vo.addComments"><![CDATA[
      if (is_array($comments)) {
        $keys = array_keys($comments);
        foreach($keys as $key) {
          $comments[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectCommentVO::isValid($comments)) {
        $comments->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdFiles" pointcut="vo.addFiles"><![CDATA[
      if (is_array($files)) {
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectFileVO::isValid($files)) {
        $files->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="updateProjectId" pointcut="dao.update" when="after"><![CDATA[
      // project changed, update relational attributes with new project id
      if ($oldProjectId && $updated) {
        $record->_updateProjectId($oldProjectId);
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_MESSAGES_WRITE, $record->getProjectId())) {
        SRA_Error::logError('MyProjectMessageDAO::delete: Error - Invalid attempt to delete file ' . $record->getTitle() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsMessage" advice="verifyReadPermissions" pointcut="vo.getMessage" />
      <aspect key="verifyReadPermissionsMessageHtml" advice="verifyReadPermissions" pointcut="vo.getMessageHtml" />
      <aspect key="verifyReadPermissionsTitle" advice="verifyReadPermissions" pointcut="vo.getTitle" />
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_MESSAGES_WRITE, $this->getProjectId())) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectMessage.error.noWriteAccess');
      }
      ]]></aspect>
      
      
      <introduction key="getCreatorName" class="vo" type="method" value="getCreatorName()"><![CDATA[
      // returns the name of the creator of this message
      if (!isset($this->_creatorName)) {
        $this->_creatorName = OsUserVO::getNameFromUid($this->getCreator());
      }
      return $this->_creatorName;
      ]]></introduction>
      <introduction key="getProject" class="vo" type="method" value="&amp;getProject()"><![CDATA[
      // returns a reference to the project associated with this message
      $dao =& SRA_DaoFactory::getDao('MyProject');
      return $dao->findByPk($this->getProjectId());
      ]]></introduction>
      <introduction key="getStatusLabel" class="vo" type="method" value="getStatusLabel()"><![CDATA[
      // returns the status label to use for this message. this label has the 
      // following format: (Last Updated|Created) by (Last updator|Creator) in project [project name] [ and task [task name]] on (last updated timestamp|created timestamp)
      $project =& $this->getProject();
      return $this->getEntityResourcesString($this->hasBeenUpdated() ? 'text.lastUpdatedBy' : 'text.createdBy1') . ' ' . ($this->hasBeenUpdated() ? $this->getLastUpdatedBy() : $this->getCreatorName()) . ' ' . $this->getEntityResourcesString('text.inProject') . ' ' . $project->getName() . ' ' . ($this->getTaskId() ? ' ' . $this->getEntityResourcesString('text.andTask') . ' ' . $this->getTaskTitle() : '') . ' ' . $this->getEntityResourcesString('text.on') . ' ' . ($this->hasBeenUpdated() ? $this->getLastUpdated(FALSE, TRUE) : $this->getCreated(FALSE, TRUE));
      ]]></introduction>
      <introduction key="getTaskTitle" class="vo" type="method" value="getTaskTitle()"><![CDATA[
      // returns the name of the task associated with this message
      if (!isset($this->_taskTitle) && $this->getTaskId()) {
        $dao =& SRA_DaoFactory::getDao('MyProjectTask');
        if (!SRA_Error::isError($task =& $dao->findByPk($this->getTaskId()))) {
          $this->_taskTitle = $task->getTitle();
        }
      }
      return $this->_taskTitle;
      ]]></introduction>
      <introduction key="hasBeenUpdated" class="vo" type="method" value="hasBeenUpdated()"><![CDATA[
      // returns TRUE if this message has been updated since it was initially 
      // created
      $created =& $this->getCreated();
      return $created->compare($this->getLastUpdated()) < 0;
      ]]></introduction>
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($messageId=NULL)"><![CDATA[
      // returns true if this message is read-only for the current user. only 
      // the original author or a project admin can change a message
      global $user;
      $messageId = $messageId ? $messageId : $this->getMessageId();
      if ($user && $messageId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT creator, project_id FROM my_project_message WHERE message_id=' . $db->convertInt($messageId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          return !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_MESSAGES_WRITE, $row[1]) || (!in_array($row[0], $user->getAllUids()) && MyProjectVO::getUserPermissions($row[1]) != MY_PROJECT_PERMISSIONS_ADMIN);
        }
      }
      return TRUE;
      ]]></introduction>
      <introduction key="includeCore_Services" class="vo" type="include" value="plugins/core/Core_Services.php" />
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
      <introduction key="includeMyProjectsManager" class="dao" type="include" value="plugins/productivity/MyProjectsManager.php" />
      <introduction key="updateProjectId" class="vo" type="method" value="_updateProjectId($oldProjectId)"><![CDATA[
      global $_myProjectsMessageUpdatingProjectId;
      if (!$_myProjectsMessageUpdatingProjectId) { $_myProjectsMessageUpdatingProjectId = array(); }
      
      if (!$_myProjectsMessageUpdatingProjectId[$this->getPrimaryKey()]) {
        $_myProjectsMessageUpdatingProjectId[$this->getPrimaryKey()] = TRUE;
        
        // comments
        $comments =& $this->getComments();
        $keys = array_keys($comments);
        foreach($keys as $key) {
          $comments[$key]->setProjectId($this->getProjectId());
          $comments[$key]->update();
        }
        
        // files
        $files =& $this->getFiles();
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
          $files[$key]->update();
        }
        
        // get rid of old project subscribers
        $subscribers =& $this->getSubscribers();
        $keys = array_keys($subscribers);
        foreach($keys as $key) {
          if ($subscribers[$key]->getProjectId() == $oldProjectId) {
            $subscribers[$key]->delete();
          }
        }
        
        MyProjectVO::rebuildSearchIndex($oldProjectId);
        unset($_myProjectsMessageUpdatingProjectId[$this->getPrimaryKey()]);
      }
      ]]></introduction>
    </aop>
    <attribute key="messageId" sequence="1" />
    <attribute key="category" max-length="128" />
    <attribute key="comments" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectComment" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="files" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectFile" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="message" depends="required" max-length="16777215" set-convert="strip_tags" sync-attributes="messageHtml" />
    <attribute key="messageHtml" max-length="16777215" set-convert="Core_Services_wikiToHtml" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="subscribers" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectDiscussionSubscriber" />
    <attribute key="taskId" type="int" />
    <attribute key="title" depends="required" max-length="255" set-convert="strip_tags" />
    
    <view key="print" template="plugins/productivity/my-projects-message-print.tpl" />
  </entity>
  
  <entity key="MyProjectMessageCategory" primary-key="categoryId">
    <aop>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['name']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      
      <aspect key="deleteCategory" pointcut="dao.delete"><![CDATA[
      if ($record->recordExists) { $this->_db->execute('UPDATE my_project_message SET category=NULL WHERE project_id=' . $record->getProjectId() . ' AND category=' . $this->_db->convertText($record->getName())); }
      ]]></aspect>
      <aspect key="updateCategory" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('name') && $record->validate()) { $this->_db->execute('UPDATE my_project_message SET category=' . $this->_db->convertText($record->getName()) . ' WHERE project_id=' . $record->getProjectId() . ' AND category=' . $this->_db->convertText($record->getName(TRUE))); }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyUniqueCategory" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->recordExists && !$this->validateErrors && $this->isDirty()) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT count(*) FROM my_project_message_category WHERE project_id=' . $this->getProjectId() . ' AND name=' . $db->convertText($this->getName()), array('int'));
        $row =& $results->next();
        if ($row[0]) {
          $resources =& $this->getEntityResources();
          $this->validateErrors['name'] = $resources->getString('MyProjectMessageCategory.error.notUnique');
        }
      }
      ]]></aspect>
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $record->getProjectId())) {
        SRA_Error::logError('MyProjectMessageCategoryDAO::delete: Error - Invalid attempt to delete message category ' . $record->getName() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $this->getProjectId())) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProject.error.notAdmin');
      }
      ]]></aspect>
      
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
    </aop>
    <attribute key="categoryId" sequence="1" />
    <attribute key="name" depends="required" max-length="128" set-convert="strip_tags" />
    <attribute key="projectId" depends="required" type="int" />
  </entity>
  
  <entity key="MyProjectsPopLog" primary-key="logId">
    <attribute key="logId" sequence="1" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="results" max-length="16777215" />
  </entity>
  
  <entity key="MyProjectParticipant" primary-key="participantId" render-append="getLabel getPermissionsDescription getPid">
    <aop>
      <advice key="sendIntroEmail"><![CDATA[
      // send introduction email
      if ($record && $record->isDirty('sendIntroEmail') && $record->isSendIntroEmail() && $record->validate()) { MyProjectsManager::_sendParticipantIntroEmail($record); }
      ]]></advice>
      
      <aspect key="removeChangeRestrictions" pointcut="dao.delete" when="after"><![CDATA[
      if ($deleted && $deleteRecordId) {
        $this->_db->execute('UPDATE my_project_file SET change_restriction=' . $this->_db->convertInt(NULL) . ' WHERE change_restriction=' . $deleteRecordId);
        $this->_db->execute('UPDATE my_project_file_version SET change_restriction=' . $this->_db->convertInt(NULL) . ' WHERE change_restriction=' . $deleteRecordId);
        $this->_db->execute('UPDATE my_project_task SET change_restriction=' . $this->_db->convertInt(NULL) . ' WHERE change_restriction=' . $deleteRecordId . ' AND change_restriction_email=' . $this->_db->convertBoolean(FALSE));
        $this->_db->execute('UPDATE my_project_whiteboard SET change_restriction=' . $this->_db->convertInt(NULL) . ' WHERE change_restriction=' . $deleteRecordId);
      }
      ]]></aspect>
      <aspect key="sendIntroEmailInsert" advice="sendIntroEmail" pointcut="dao.insert" />
      <aspect key="sendIntroEmailUpdate" advice="sendIntroEmail" pointcut="dao.update" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $record->getProjectId())) {
        SRA_Error::logError('MyProjectParticipantDAO::delete: Error - Invalid attempt to delete participant ' . $record->getId() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyAdminPermissions" pointcut="vo.validate" when="after"><![CDATA[
      if ($this->getProjectId() && !$this->validateErrors && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_ADMIN, $this->getProjectId())) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProject.error.notAdmin');
      }
      ]]></aspect>
      
      <introduction key="getLabel" class="vo" type="method" value="getLabel()"><![CDATA[
      // returns the name for this participant
      $resources =& SRA_Controller::getAppResources();
      return $this->getIsGroup() ? OsGroupVO::getNameFromGid($this->getId()) . ' (' . $resources->getString('OsGroup') . ')' : OsUserVO::getNameFromUid($this->getId());
      ]]></introduction>
      
      <introduction key="getPermissionsDescription" class="vo" type="method" value="getPermissionsDescription()"><![CDATA[
      // returns a string describing the permissions of this participant
      
      $indiResources =& SRA_ResourceBundle::getBundle('etc/plugins/productivity/l10n/productivity');
      $permissions = '';
      if (($this->_permissions & MY_PROJECT_PERMISSIONS_ADMIN) == MY_PROJECT_PERMISSIONS_ADMIN) {
        $permissions = $indiResources->getString('text.permissions.projectAdmin');
      }
      else if (($this->_permissions & MY_PROJECT_PERMISSIONS_FULL_PARTICIPANT) == MY_PROJECT_PERMISSIONS_FULL_PARTICIPANT) {
        $permissions = $indiResources->getString('text.permissions.fullParticipant1');
      }
      else {
        if ($this->_permissions & MY_PROJECT_PERMISSIONS_FILES_WRITE) {
          $permissions = $indiResources->getString('text.permissions.fileWrite');
        }
        else if ($this->_permissions & MY_PROJECT_PERMISSIONS_FILES_READ) {
          $permissions = $indiResources->getString('text.permissions.fileRead');
        }
        
        if ($this->_permissions & MY_PROJECT_PERMISSIONS_MESSAGES_WRITE) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.messageWrite');
        }
        else if ($this->_permissions & MY_PROJECT_PERMISSIONS_MESSAGES_READ) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.messageRead');
        }
        
        if ($this->_permissions & MY_PROJECT_PERMISSIONS_TASKS_WRITE) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.taskWrite');
        }
        else if ($this->_permissions & MY_PROJECT_PERMISSIONS_TASKS_READ) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.taskRead');
        }
        
        if ($this->_permissions & MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.whiteboardWrite');
        }
        else if ($this->_permissions & MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ) {
          $permissions .= $permissions != '' ? ', ' : '';
          $permissions .= $indiResources->getString('text.permissions.whiteboardRead');
        }
      }
      return $permissions;
      ]]></introduction>
      
      <introduction key="getPid" class="vo" type="method" value="getPid()"><![CDATA[
      // returns the pid (participant identifier) for this participant
      return 'p' . $this->_participantId;
      ]]></introduction>
      
      <introduction key="getUids" class="vo" type="method" value="getUids()"><![CDATA[
      // returns an array pertaining to all of the uids for this participant. 
      // if this is not a group participant, this array will contain only a 
      // single uid, otherwise, it will contain the uids of all of the members 
      // of the group
      return $this->isIsGroup() ? array($this->getId()) : array_keys(OsGroupVO::getUserHash($this->getId()));
      ]]></introduction>
      
      <introduction key="includeMyProjectsManager" class="dao" type="include" value="plugins/productivity/MyProjectsManager.php" />
    </aop>
    <attribute key="participantId" sequence="1" />
    <attribute key="id" type="int" />
    <attribute key="isGroup" default="TRUE" type="boolean" />
    <attribute key="permissions" type="int" />
    <attribute key="projectId" type="int" />
    <attribute key="sendIntroEmail" skip-persistence="1" type="boolean" />
  </entity>
  
  <entity key="MyProjectTask" primary-key="taskId" render-append="canToggleStatus canToggleStatusMsg getCompleteConfirmMsg getLabelDates getLabelDuration getLabelPercentComplete getParentId isUserReadOnly" render-exclude="files messages parent predecessor subTasks whiteboards">
    <ajax-service key="myProjectTaskPrint" limit="1" raw="1" view="print" />
    <ajax-service key="myProjectTaskService" create="1" delete="1" update="1" />
    <aop>
      <advice key="sendNotifications"><![CDATA[
      // send task assignment notifications when applicable
      if (($updated || $inserted) && (isset($oldDirtyFlags['creator']) || (isset($oldDirtyFlags['changeRestriction']) && $record->getChangeRestriction()))) { 
        MyProjectsManager::_sendTaskNotifications($record, isset($oldDirtyFlags['creator']), isset($oldDirtyFlags['changeRestriction']) && $record->getChangeRestriction());
      }
      ]]></advice>
      <advice key="updateListTasks"><![CDATA[
      if (($inserted || $updated) && ($parentIds = $record->getParentIds())) { 
        foreach($parentIds as $taskId) {
          $tasks =& $this->findByQuery('SELECT task_id FROM my_project_task WHERE task_id=' . $this->_db->convertInt($taskId) . ' AND list=' . $this->_db->convertBoolean(TRUE));
          $keys = array_keys($tasks);
          foreach($keys as $key) {
            $tasks[$key]->setStatus(MyProjectTaskVO::isChildrenCompleted($tasks[$key]->getTaskId()) ? MY_PROJECT_STATUS_COMPLETED : MY_PROJECT_STATUS_ACTIVE);
            $tasks[$key]->_ignoreListStatus = TRUE;
            $tasks[$key]->update();
            $tasks[$key]->_ignoreListStatus = FALSE;
          }
        }
      }
      ]]></advice>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['description']) || isset($oldDirtyFlags['title']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      if ($this->recordExists && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_TASKS_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectFileVersionDAO::_find: Error - Invalid attempt to access task ' . $this->getPrimaryKey() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user;]]></aspect>
      <aspect key="finalValidation" pointcut="vo.validate" when="after"><![CDATA[
      $db =& SRA_Controller::getAppDb();
      $resources =& $this->getEntityResources();
      
      // verify write permissions
      if (!$id && !$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_TASKS_WRITE, $this->getProjectId(), $this->getAttribute('changeRestriction_participantId'), $this->_strictPermissions)) {
        $this->validateErrors[] = $resources->getString('MyProjectTask.error.noWriteAccess');
      }
      // disabled tasks cannot be updated
      if (!$id && !$this->validateErrors && $this->recordExists && $this->isDisabled() && !$this->isDirty('disabled') && $this->isDirty()) {
        $this->validateErrors[] = $resources->getString('MyProjectTask.error.taskDisabled');
      }
      // wf locked tasks cannot be updated
      if (!$id && $this->recordExists && $this->isWfLocked() && !$this->isDirty('wfLocked')) {
        $this->validateErrors[] = $resources->getString('MyProjectTask.error.taskWfLocked');
      }
      
      // validate new due date: cannot be after any parent due date, after the 
      // project due date, before the predecessor due date, or before any child 
      // due date
      if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('dueDate') && SRA_GregorianDate::isValid($dueDate = $this->getDueDate())) {
        if (($projectDueDate = $this->getProjectDueDate()) && $dueDate->compare($projectDueDate) > 0) {
          $this->validateErrors['dueDate'] = $resources->getString('MyProjectTask.error.dueDateAfterProject');
        }
        else if (($predecessorDueDate = $this->getPredecessorDueDate()) && $dueDate->compare($predecessorDueDate) < 0) {
          $this->validateErrors['dueDate'] = $resources->getString('MyProjectTask.error.dueDateBeforePredecessor');
        }
        else if (($parentDueDate = $this->getParentDueDate()) && $dueDate->compare($parentDueDate) > 0) {
          $this->validateErrors['dueDate'] = $resources->getString('MyProjectTask.error.dueDateAfterParent');
        }
        else if (($childDueDate = $this->getChildDueDate(FALSE)) && $dueDate->compare($childDueDate) < 0) {
          $this->validateErrors['dueDate'] = $resources->getString('MyProjectTask.error.dueDateBeforeChild');
        }
      }
      
      // validate parent changes
      if (!$id && !$this->validateErrors && $this->recordExists && $this->getStatus() != MY_PROJECT_TASK_STATUS_COMPLETED && $this->getStatus() != MY_PROJECT_TASK_STATUS_CANCELLED && $this->isDirty('parent') && ($parent =& $this->getParent()) && ($parent->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED || $parent->isAnyParentCompleted())) {
        $this->validateErrors['parent'] = $resources->getString('MyProjectTask.error.changeParentCompleted');
      }
      else if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('parent') && ($parent =& $this->getParent()) && $parent->getProjectId() != $this->getProjectId()) {
        $this->validateErrors['parent'] = $resources->getString('MyProjectTask.error.parentDifferentProject');
      }
      
      // validate predecessor changes
      if (!$id && !$this->validateErrors && $this->recordExists && $this->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED && $this->isDirty('predecessor') && ($predecessor =& $this->getPredecessor()) && $predecessor->getStatus() != MY_PROJECT_TASK_STATUS_COMPLETED) {
        $this->validateErrors['predecessor'] = $resources->getString('MyProjectTask.error.changePredecessorCompleted');
      }
      else if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('predecessor') && ($predecessor =& $this->getPredecessor()) && $predecessor->getProjectId() != $this->getProjectId()) {
        $this->validateErrors['predecessor'] = $resources->getString('MyProjectTask.error.predecessorDifferentProject');
      }
      else if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('predecessor') && ($predecessor =& $this->getPredecessor()) && $predecessor->getAttribute('predecessor_taskId') == $this->getTaskId()) {
        $this->validateErrors['predecessor'] = $resources->getString('MyProjectTask.error.predecessorCircular');
      }
      
      // validate status changes
      if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('status')) {
        // list tasks can only be set to active or completed status
        if ($this->isList() && $this->getStatus() != MY_PROJECT_TASK_STATUS_ACTIVE && $this->getStatus() != MY_PROJECT_TASK_STATUS_COMPLETED && $this->getStatus() != MY_PROJECT_TASK_STATUS_WAIT) {
          $this->validateErrors['status'] = $resources->getString('MyProjectTask.error.listStatusActiveCompleted');
        }
        // completing or uncompleting task
        else if (($this->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED || $this->getStatus(TRUE) == MY_PROJECT_TASK_STATUS_COMPLETED) && ($err = $this->canToggleStatus(NULL, TRUE, $this->_ignoreListStatus, $this->_ignoreWfLocked))) {
          $this->validateErrors['status'] = $err;
        }
        // putting task on hold
        else if ($this->getStatus() == MY_PROJECT_TASK_STATUS_HOLD) {
          // task must be currently in active status
          if ($this->getStatus(TRUE) != MY_PROJECT_TASK_STATUS_ACTIVE) {
            $this->validateErrors['status'] = $resources->getString('MyProjectTask.error.holdNotActive');
          }
        }
        // cancelling task
        else if ($this->getStatus() == MY_PROJECT_TASK_STATUS_CANCELLED) {
          // task must be currently in active status
          if ($this->getStatus(TRUE) != MY_PROJECT_TASK_STATUS_ACTIVE) {
            $this->validateErrors['status'] = $resources->getString('MyProjectTask.error.cancelledNotActive');
          }
        }
      }
      
      // predecessor cannot be itself or a parent
      if (!$id && $this->isDirty('predecessor') && MyProjectTaskVO::isValid($this->_predecessor) && ($this->_predecessor->equals($this) || $this->isMyParent($this->_predecessor))) {
        $this->validateErrors['predecessor'] = $resources->getString('MyProjectTask.error.predecessor');
      }
      // attributes that cannot be changed for workflow tasks
      if (!$id && !$this->validateErrors && $this->recordExists && ($this->_wfStepId || $this->_wfTaskId) && $this->isDirty(array('changeRestriction', 'creator', 'parent', 'predecessor', 'projectId', 'readOnly', 'strictPermissions', 'wfStepId', 'wfTaskId'))) {
        $this->validateErrors[] = $resources->getString('MyProjectTask.error.wfTaskCannotChangeAttrs');
      }
      // wf tasks must be completed
      if (!$id && !$this->validateErrors && $this->recordExists && $this->isDirty('status') && $this->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED && ($this->_wfStepId || $this->_wfTaskId)) {
        if ($this->_wfStepId) {
          $dao =& SRA_DaoFactory::getDao('SraWorkflowStep');
          $wfStep =& $dao->findByPk($this->_wfStepId);
          $status = $wfStep->getStatus();
        }
        else {
          $status = $this->isPartOfWfStep() ? MY_PROJECT_TASK_STATUS_COMPLETED : SRA_Database::getQueryValue($db, 'SELECT status FROM sra_workflow_task WHERE task_id=' . $this->_wfTaskId);
        }
        if ($status != MY_PROJECT_TASK_STATUS_COMPLETED) {
          $this->validateErrors[] = $resources->getString('MyProjectTask.error.wfTaskNotCompleted');
        }
      }
      
      // validate durations
      if (!$id && !$this->validateErrors && $this->isDirty('durationActual') && $this->getDurationActual() !== NULL && $this->normalizeDuration($this->getDurationActual()) === NULL) {
        $this->validateErrors['durationActual'] = $resources->getString('MyProjectTask.error.duration', array('duration' => $this->getDurationActual()));
      }
      if (!$id && !$this->validateErrors && $this->isDirty('durationPlanned') && $this->getDurationPlanned() !== NULL && $this->normalizeDuration($this->getDurationPlanned()) === NULL) {
        $this->validateErrors['durationPlanned'] = $resources->getString('MyProjectTask.error.duration', array('duration' => $this->getDurationPlanned()));
      }
      ]]></aspect>
      <aspect key="removeSuccessors" pointcut="dao.delete" when="after"><![CDATA[
      if ($deleted && $deleteRecordId) {
        $this->_db->execute('UPDATE my_project_task SET status=' . $this->_db->convertText(MY_PROJECT_TASK_STATUS_ACTIVE) . ' WHERE predecessor=' . $deleteRecordId . ' AND status=' . $this->_db->convertText(MY_PROJECT_TASK_STATUS_WAIT));
        $this->_db->execute('UPDATE my_project_task SET predecessor=NULL WHERE predecessor=' . $deleteRecordId);
      }
      ]]></aspect>
      <aspect key="sendNotificationsInsert" advice="sendNotifications" pointcut="dao.insert" when="after" />
      <aspect key="sendNotificationsUpdate" advice="sendNotifications" pointcut="dao.update" when="after" />
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setOldProjectId" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('projectId')) { 
        $oldProjectId = $record->getProjectId(TRUE);
        if (!$record->isDirty('changeRestriction')) { $record->setChangeRestriction(); }
      }
      ]]></aspect>
      <aspect key="setPercentComplete" pointcut="dao.update"><![CDATA[
      // set task to 100% complete if applicable
      if ($record->isDirty('status') && $record->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED && $record->getPercentComplete() !== NULL) { 
        $record->setPercentComplete(100);
      }
      ]]></aspect>
      <aspect key="setProjectIdFiles" pointcut="vo.addFiles"><![CDATA[
      if (is_array($files)) {
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectFileVO::isValid($files)) {
        $files->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdMessages" pointcut="vo.addMessages"><![CDATA[
      if (is_array($messages)) {
        $keys = array_keys($messages);
        foreach($keys as $key) {
          $messages[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectMessageVO::isValid($messages)) {
        $messages->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdSubTasks" pointcut="vo.addSubTasks"><![CDATA[
      if (is_array($subTasks)) {
        $keys = array_keys($subTasks);
        foreach($keys as $key) {
          $subTasks[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectTaskVO::isValid($subTasks)) {
        $subTasks->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setProjectIdWhiteboards" pointcut="vo.addWhiteboards"><![CDATA[
      if (is_array($whiteboards)) {
        $keys = array_keys($whiteboards);
        foreach($keys as $key) {
          $whiteboards[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectWhiteboardVO::isValid($whiteboards)) {
        $whiteboards->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="updateForParentProjectId" pointcut="vo.setParent"><![CDATA[
      if (MyProjectTaskVO::isValid($parent) && $parent->getProjectId() != $this->getProjectId()) {
        $this->setProjectId($parent->getProjectId());
      }
      ]]></aspect>
      <aspect key="updateForPredecessor" pointcut="dao.update"><![CDATA[
      // if the predecessor attribute is dirty, make changes to status/project 
      // if necessary
      if ($record->isDirty('predecessor')) {
        $predecessor =& $record->getPredecessor();
        // change status to wait because predecessor is not completed
        if (!$record->isTerminal() && $predecessor && !$predecessor->isTerminal()) {
          $record->setStatus(MY_PROJECT_TASK_STATUS_WAIT);
        }
        // change status back to active because predecessor has been reset
        else if (!$record->isTerminal() && !$predecessor && $record->getStatus() == MY_PROJECT_TASK_STATUS_WAIT) {
          $record->setStatus(MY_PROJECT_TASK_STATUS_ACTIVE);
        }
        // update project id for predecessor
        if ($predecessor && $predecessor->getProjectId() != $record->getProjectId()) {
          $record->setProjectId($predecessor->getProjectId());
        }
      }
      ]]></aspect>
      <aspect key="updateListTasksInsert" advice="updateListTasks" pointcut="dao.insert" when="after" />
      <aspect key="updateListTasksUpdate" advice="updateListTasks" pointcut="dao.update" when="after" />
      <aspect key="updateProjectId" pointcut="dao.update" when="after"><![CDATA[
      // project changed, update relational attributes with new project id
      if ($oldProjectId && $updated) {
        $record->_updateProjectId($oldProjectId);
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="updateSuccessors" pointcut="dao.update" when="after"><![CDATA[
      if ($updated && isset($oldDirtyFlags['status'])) {
        $this->_db->execute('UPDATE my_project_task SET status=' . $this->_db->convertText($record->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED ? MY_PROJECT_TASK_STATUS_ACTIVE : MY_PROJECT_TASK_STATUS_WAIT) . ' WHERE predecessor=' . $record->getPrimaryKey() . ' AND status <> ' . $this->_db->convertText(MY_PROJECT_TASK_STATUS_CANCELLED));
      }
      ]]></aspect>
      <aspect key="updateWfLockStatus" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('status') && $record->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED && ($record->getWfStepId() || ($record->getWfTaskId() && !$record->isPartOfWfStep()))) { $record->setWfLocked(TRUE); }
      ]]></aspect>
      <aspect key="updateWfTasks" pointcut="dao.update" when="after"><![CDATA[
      if ($updated && isset($oldDirtyFlags['status']) && $record->getStatus() == MY_PROJECT_TASK_STATUS_COMPLETED && $record->getWfStepId()) { MyProjectsTemplate::syncWfTasks($record->getProjectId(), $record); }
      ]]></aspect>
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (($record->getWfStepId() || $record->getWfTaskId()) && !MyProjectVO::isBeingDeleted($record->getProjectId())) {
        SRA_Error::logError('MyProjectTaskDAO::delete: Error - Invalid attempt to delete project workflow task ' . $record->getTaskId() . ' in project ' . $record->getProjectId() . '. Workflow tasks can only be deleted when the project is also deleted', __FILE__, __LINE__);
      }
      else if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_TASKS_WRITE, $record->getProjectId(), $record->getAttribute('changeRestriction_participantId'), $this->_strictPermissions)) {
        SRA_Error::logError('MyProjectTaskDAO::delete: Error - Invalid attempt to delete project task ' . $record->getTaskId() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsDescription" advice="verifyReadPermissions" pointcut="vo.getDescription" />
      <aspect key="verifyReadPermissionsTitle" advice="verifyReadPermissions" pointcut="vo.getTitle" />
      
      
      <introduction key="canToggleStatus" class="vo" type="method" value="canToggleStatus($taskId=NULL, $returnErrMsg=FALSE, $ignoreListStatus=FALSE, $returnCode=FALSE)"><![CDATA[
      // returns true if this task's status can be toggled by the current user. 
      // this means, whether or not the user can change the status from active 
      // to completed and vise-versa. whether or not this is possible will 
      // depend on a variety of factors including the following: 
      //   - whether or not the task is disabled
      //   - whether or not the task is currently active/completed
      //   - whether or not the task is locked by the workflow
      //   - whether or not the user has task write permission
      //   - if the status is active:
      //       - children must be completed
      //       - predecessor must be completed
      //   - if the status is completed:
      //       - all parent tasks must be completed
      //       - no successor tasks can be completed
      // this method can also be invoked statically using the $taskId parameter
      // if the $returnErrMsg parameter is TRUE, the return value will be NULL
      // if status toggle is allowed, a localized error message otherwise. if 
      // the $returnCode parameter is TRUE, one of the toggle status codes below 
      // will be returned
      
      // used to store toggle status query responses:
      //   1     = disabled
      //   2     = wf locked
      //   3     = not active or completed
      //   4     = no write access
      //   5     = active and predecessor is not completed
      //   6     = active and a child is not completed
      //   7     = completed and parent is completed
      //   8     = completed and a successor is completed
      //   9     = task is a list
      //   TRUE  = status toggle allowed
      //   FALSE = status toggle not allowed (error)
      
      static $_canToggleStatusCache = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if ($taskId && !isset($_canToggleStatusCache[$taskId])) {
        if (!MyProjectTaskVO::isValid($this) || $this->getTaskId() != $taskId) {
          $db =& SRA_Controller::getAppDb();
          $results =& $db->fetch('SELECT disabled, wf_locked, status, list FROM my_project_task WHERE task_id=' . $taskId, array(SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_TEXT, SRA_DATA_TYPE_BOOLEAN));
          if ($results->count()) {
            $row =& $results->next();
            $disabled = $row[0];
            $wfLocked = $row[1];
            $status = $row[2];
            $list = $row[3];
          }
        }
        else {
          $disabled = $this->isDisabled(TRUE);
          $wfLocked = $this->isWfLocked(TRUE);
          $status = $this->getStatus(TRUE);
          $list = $this->isList(TRUE);
        }
        $_canToggleStatusCache[$taskId] = !$status ? FALSE : 
                                          ($list && !$ignoreListStatus ? 9 : 
                                          ($disabled ? 1 : 
                                          ($wfLocked ? 2 : 
                                          (MyProjectTaskVO::isUserReadOnly($taskId) ? 4 : 
                                          ($status == MY_PROJECT_TASK_STATUS_WAIT ? 5 : 
                                          ($status != MY_PROJECT_TASK_STATUS_ACTIVE && $status != MY_PROJECT_TASK_STATUS_COMPLETED ? 3 : 
                                          ($status == MY_PROJECT_TASK_STATUS_ACTIVE && !MyProjectTaskVO::isPredecessorCompleted($taskId) ? 5 : 
                                          ($status == MY_PROJECT_TASK_STATUS_ACTIVE && !MyProjectTaskVO::isChildrenCompleted($taskId) ? 6 : 
                                          ($status == MY_PROJECT_TASK_STATUS_COMPLETED && MyProjectTaskVO::isParentCompleted($taskId) ? 7 : 
                                          ($status == MY_PROJECT_TASK_STATUS_COMPLETED && MyProjectTaskVO::isSuccessorCompleted($taskId) ? 8 : TRUE))))))))));
      }
      if (!$returnErrMsg) {
        return $taskId ? ($returnCode ? $_canToggleStatusCache[$taskId] : $_canToggleStatusCache[$taskId] === TRUE) : FALSE;
      }
      else {
        $resources =& MyProjectTaskVO::getEntityResources();
        // construct error message params based on status
        $params = array();
        if ($taskId && $_canToggleStatusCache[$taskId] && $_canToggleStatusCache[$taskId] !== TRUE) {
          $db =& SRA_Controller::getAppDb();
          switch ($_canToggleStatusCache[$taskId]) {
            case 3:
              $params['status'] = $resources->getString('text.status.' . SRA_Database::getQueryValue($db, 'SELECT status FROM my_project_task WHERE task_id=' . $db->convertInt($taskId)));
              break;
            case 4:
              $params['owners'] = MyProjectTaskVO::getOwnerNames($taskId);
              break;
            case 5:
              $params['predecessor'] = MyProjectTaskVO::getPredecessorName($taskId);
              break;
            case 6:
              $results =& $db->fetch('SELECT title FROM my_project_task WHERE task_id IN (' . implode(', ', MyProjectTaskVO::getChildIds($taskId)) . ') AND status <> ' . 
                          $db->convertText(MY_PROJECT_TASK_STATUS_COMPLETED) . ' AND status <> ' . $db->convertText(MY_PROJECT_TASK_STATUS_CANCELLED));
              $params['subTasks'] = $results->getDelimitedResults('', FALSE, ', ', ', ' . $resources->getString('text.and') . ' ');
              break;
            case 7:
              $results =& $db->fetch('SELECT title FROM my_project_task WHERE task_id IN (' . implode(', ', MyProjectTaskVO::getParentIds($taskId)) . ') AND status = ' . $db->convertText(MY_PROJECT_TASK_STATUS_COMPLETED));
              $params['parentTasks'] = $results->getDelimitedResults('', FALSE, ', ', ', ' . $resources->getString('text.and') . ' ');
              break;
            case 8:
              $results =& $db->fetch('SELECT title FROM my_project_task WHERE task_id IN (' . implode(', ', MyProjectTaskVO::getSuccessorIds($taskId)) . ') AND status = ' . $db->convertText(MY_PROJECT_TASK_STATUS_COMPLETED));
              $params['successors'] = $results->getDelimitedResults('', FALSE, ', ', ', ' . $resources->getString('text.and') . ' ');
              break;
          }
        }
        return $taskId && $_canToggleStatusCache[$taskId] === TRUE ? NULL : $resources->getString('MyProjectTask.error.canToggleStatus' . ($taskId && $_canToggleStatusCache[$taskId] !== FALSE ? $_canToggleStatusCache[$taskId] : ''), $params);
      }
      ]]></introduction>
      <introduction key="canToggleStatusMsg" class="vo" type="method" value="canToggleStatusMsg($taskId=NULL)"><![CDATA[
      // shortcut to canToggleStatus($taskId, TRUE) - returns the can toggle 
      // error message
      return MyProjectTaskVO::canToggleStatus($taskId, TRUE);
      ]]></introduction>
      <introduction key="doConfirm" class="vo" type="method" value="doConfirm()"><![CDATA[
      // returns true if a confirm message should be displayed prior to this 
      // task being completed (retrieve this message using the 
      // 'getCompleteConfirmMsg' method)
      return $this->_completeConfirmMsg || $this->_wfStepId || ($this->_wfTaskId && !$this->isPartOfWfStep());
      ]]></introduction>
      <introduction key="getChildDueDate" class="vo" type="method" value="getChildDueDate($min=TRUE, $taskId=NULL)"><![CDATA[
      // returns the minimum or maximum child due date or NULL if task does not 
      // have children, or does not have children with a due date. can be 
      // invoked statically as well using the $taskId parameter. if the $min 
      // parameter is FALSE, the max due date will be returned
      static $_myProjectsCachedChildDueDates = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      $cacheKey = $taskId . '_' . $min;
      
      $dueDate = NULL;
      if ($taskId && !isset($_myProjectsCachedChildDueDates[$cacheKey])) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT task_id, due_date FROM my_project_task WHERE parent=' . $db->convertInt($taskId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_DATE));
        while($row =& $results->next()) {
          if ($row[1] && (!$dueDate || ($min && $dueDate->compare($row[1]) > 0) || (!$min && $dueDate->compare($row[1]) < 0))) { $dueDate =& $row[1]; }
          if (($childDueDate = MyProjectTaskVO::getChildDueDate($min, $row[0])) && (!$dueDate || ($min && $dueDate->compare($childDueDate) > 0) || (!$min && $dueDate->compare($childDueDate) < 0))) { $dueDate =& $childDueDate; }
        }
        $_myProjectsCachedChildDueDates[$cacheKey] = $dueDate !== NULL ? $dueDate : -1;
      }
      return $taskId && $_myProjectsCachedChildDueDates[$cacheKey] !== -1 ? $_myProjectsCachedChildDueDates[$cacheKey] : $dueDate;
      ]]></introduction>
      <introduction key="getChildIds" class="vo" type="method" value="getChildIds($taskId=NULL)"><![CDATA[
      // returns an array of task ids corresponding to all of the children of 
      // this task from the immediate children all the way to the leaf-level 
      // descendents. returns an empty array if this task does not have any 
      // children. this method may also be invoked statically using the $taskId 
      // parameter
      static $_myProjectsCachedChildIds = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      $childIds = array();
      if ($taskId && !isset($_myProjectsCachedChildIds[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT task_id FROM my_project_task WHERE parent=' . $db->convertInt($taskId), array(SRA_DATA_TYPE_INT));
        while($row =& $results->next()) {
          $childIds[] = $row[0];
          $childIds = array_merge($childIds, MyProjectTaskVO::getChildIds($row[0]));
        }
        $_myProjectsCachedChildIds[$taskId] = $childIds;
      }
      return $taskId ? $_myProjectsCachedChildIds[$taskId] : $childIds;
      ]]></introduction>
      <introduction key="getCompleteConfirmMsg" class="vo" type="method" value="getCompleteConfirmMsg()"><![CDATA[
      // return localized complete confirm message
      if (!isset($this->_completeConfirmMsg) && $this->doConfirm()) { 
        $rb =& MyProjectVO::getProjectTemplateResources($this->getProjectId());
        if (!$this->getWfStepId() && !$this->getWfTaskId()) {
          $this->_completeConfirmMsg = $this->_completeConfirm && $rb ? $rb->getString($this->_completeConfirm) : $this->_completeConfirm;
        }
        else {
          $productivityResources =& SRA_ResourceBundle::getBundle(MY_PROJECTS_MANAGER_PRODUCTIVITY_RESOURCES);
          $key = $this->getWfStepId() ? MY_PROJECTS_MANAGER_COMPLETE_STEP_CONFIRM : MY_PROJECTS_MANAGER_COMPLETE_TASK_CONFIRM;
          return $rb && $rb->containsKey($key) ? $rb->getString($key) : $productivityResources->getString($key);
        }
      }
      return $this->_completeConfirmMsg;
      ]]></introduction>
      <introduction key="getDurationLabel" class="vo" type="method" value="getDurationLabel($duration)"><![CDATA[
      // returns the label to use for a specific duration. this method converts 
      // the duration quantifier into a text value (h=hours, d=days, w=weeks, 
      // m=months, y=years)
      if ($duration) {
        $suffix = substr($duration, -1);
        $value = is_numeric($suffix) ? $duration : substr($duration, 0, -1);
        $suffix = is_numeric($suffix) ? 'h' : $suffix;
      }
      return is_numeric($value) && in_array(strtolower($suffix), array('h', 'd', 'w', 'm', 'y')) ? $value . ' ' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.duration.' . strtolower($suffix) . ($value > 1 ? 'p' : '')) : '';
      ]]></introduction>
      <introduction key="getICalDueDate" class="vo" type="method" value="getICalDueDate()"><![CDATA[
      // return the ical due date (the due date + 1 day)
      if ($dueDate = $this->getDueDate()) { $dueDate->jump(SRA_GREGORIAN_DATE_UNIT_DAY); }
      return $dueDate;
      ]]></introduction>
      <introduction key="getLabelDates" class="vo" type="method" value="getLabelDates($startDate=NULL, $dueDate=NULL)"><![CDATA[
      // return the label to use to represent the start and due date for this 
      // task. may also be invoked statically by explicitely providing the 
      // $startDate and $dueDate
      
      $startDate = $startDate ? $startDate : (method_exists($this, 'getStartDate') ? $this->getStartDate() : NULL);
      $dueDate = $dueDate ? $dueDate : (method_exists($this, 'getDueDate') ? $this->getDueDate() : NULL);
      
      $label = MyProjectTaskVO::getEntityResourcesString('text.notSpecified');
      if ($startDate && $dueDate) {
        $label = $startDate->toString() . ' - ' . $dueDate->toString();
      }
      else if ($startDate) {
        $label = $startDate->toString() . ' (' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.startDate') . ')';
      }
      else if ($dueDate) {
        $label = $dueDate->toString() . ' (' . MyProjectTaskVO::getEntityResourcesString('text.dueDate') . ')';
      }
      return $label;
      ]]></introduction>
      <introduction key="getLabelDuration" class="vo" type="method" value="getLabelDuration($planned=NULL, $actual=NULL)"><![CDATA[
      // return the label to use to represent the duration for this task. may 
      // also be invoked statically by explicitely providing the $planned and 
      // $actual durations
      
      $planned = $planned ? $planned : (method_exists($this, 'getDurationPlanned') ? $this->getDurationPlanned() : NULL);
      $actual = $actual ? $actual : (method_exists($this, 'getDurationActual') ? $this->getDurationActual() : NULL);
      
      $label = MyProjectTaskVO::getEntityResourcesString('text.notSpecified');
      if ($planned && $actual) {
        $label = MyProjectTaskVO::getDurationLabel($planned) . ' ' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.durationPlanned') . ' - ' . MyProjectTaskVO::getDurationLabel($actual) . ' ' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.durationActual');
      }
      else if ($planned) {
        $label = MyProjectTaskVO::getDurationLabel($planned) . ' ' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.durationPlanned');
      }
      else if (actual) {
        $label = MyProjectTaskVO::getDurationLabel($actual) . ' ' . MyProjectTaskVO::getEntityResourcesString('MyProjectTask.durationActual');
      }
      return $label;
      ]]></introduction>
      <introduction key="getLabelPercentComplete" class="vo" type="method" value="getLabelPercentComplete($percentComplete=NULL)"><![CDATA[
      // return the label to use to represent the percent complete for this 
      // task. may also be invoked statically by explicitely providing 
      // $percentComplete
      
      $percentComplete = isset($percentComplete) ? $percentComplete : (method_exists($this, 'getPercentComplete') ? $this->getPercentComplete() : NULL);
      
      return $percentComplete !== NULL ? $percentComplete . '%' : MyProjectTaskVO::getEntityResourcesString('text.notSpecified');
      ]]></introduction>
      <introduction key="getOwnerNames" class="vo" type="method" value="getOwnerNames($taskId=NULL)"><![CDATA[
      // returns the names of the owners (as a single formatted string) of this 
      // task. these are the users/group that have the ability to change the 
      // task. can be invoked statically as well using the $taskId parameter
      static $_myProjectTaskCachedOwnerNames = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      $owners = '';
      if ($taskId && !isset($_myProjectTaskCachedOwnerNames[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT change_restriction, creator, strict_permissions, change_restriction_email, project_id, read_only FROM my_project_task WHERE task_id=' . $db->convertInt($taskId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN));
        if($results->count()) {
          $row =& $results->next();
          // creator
          if (!$row[2]) {
            $owners .= ($owners != '' ? ', ' : '') . OsUserVO::getNameFromUid($row[1]);
          }
          $dao =& SRA_DaoFactory::getDao('MyProject');
          if (!SRA_Error::isError($project =& $dao->findByPk($row[4]))) {
            // read only access
            if ($row[3] || $row[5]) {
              if ($row[0] && ($participant =& $row[3] ? $project->getEmailParticipants($row[0]) : $participant =& $project->getParticipants($row[0]))) {
                $owners .= ($owners != '' ? ', ' : '') . $participant->getLabel();
              }
            }
            // limit access to all participants with task write permissions
            else {
              if ($participants =& $project->getParticipants()) {
                $keys = array_keys($participants);
                foreach($keys as $key) {
                  if (($participants[$key]->getPermissions() & MY_PROJECT_PERMISSIONS_TASKS_WRITE) == MY_PROJECT_PERMISSIONS_TASKS_WRITE) {
                    $owners .= ($owners != '' ? ', ' : '') . $participants[$key]->getLabel();
                  }
                }
              }
              if ($participants =& $project->getEmailParticipants()) {
                $keys = array_keys($participants);
                foreach($keys as $key) {
                  if (($participants[$key]->getPermissions() & MY_PROJECT_PERMISSIONS_TASKS_WRITE) == MY_PROJECT_PERMISSIONS_TASKS_WRITE) {
                    $owners .= ($owners != '' ? ', ' : '') . $participants[$key]->getLabel();
                  }
                }
              }
            }
          }
        }
        $_myProjectTaskCachedOwnerNames[$taskId] = $owners;
      }
      return $taskId ? $_myProjectTaskCachedOwnerNames[$taskId] : '';
      ]]></introduction>
      <introduction key="getParentDueDate" class="vo" type="method" value="getParentDueDate($min=TRUE, $taskId=NULL)"><![CDATA[
      // returns the minimum or maximum parent due date or NULL if task does not 
      // have a parent, or does not have a parent with a due date. can be 
      // invoked statically as well using the $taskId parameter. if the $min 
      // parameter is FALSE, the max due date will be returned
      if (method_exists($this, 'isDirty') && $this->isDirty('parent')) {
        $parent =& $this->getParent();
        return $parent ? $parent->getDueDate() : NULL;
      }
      
      static $_myProjectsCachedParentDueDates = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      $cacheKey = $taskId . '_' . $min;
      
      $dueDate = NULL;
      if ($taskId && !isset($_myProjectsCachedParentDueDates[$cacheKey])) {
        $db =& SRA_Controller::getAppDb();
        if ($parent = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $parentDueDate = SRA_Database::getQueryValue($db, 'SELECT due_date FROM my_project_task WHERE task_id=' . $db->convertInt($parent), SRA_DATA_TYPE_DATE);
          
          if ($parentDueDate && (!$dueDate || ($min && $dueDate->compare($parentDueDate) > 0) || (!$min && $dueDate->compare($parentDueDate) < 0))) { $dueDate =& $parentDueDate; }
          if (($parentDueDate = MyProjectTaskVO::getParentDueDate($min, $parent)) && (!$dueDate || ($min && $dueDate->compare($parentDueDate) > 0) || (!$min && $dueDate->compare($parentDueDate) < 0))) { $dueDate =& $parentDueDate; }
        }
        $_myProjectsCachedParentDueDates[$cacheKey] = $dueDate !== NULL ? $dueDate : -1;
      }
      return $taskId && $_myProjectsCachedParentDueDates[$cacheKey] !== -1 ? $_myProjectsCachedParentDueDates[$cacheKey] : $dueDate;
      ]]></introduction>
      <introduction key="getParentId" class="vo" type="method" value="getParentId($taskId=NULL)"><![CDATA[
      // returns the immediate parent id for this task. may also be invoked 
      // statically using the $taskId parameter
      return $taskId ? SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId)) : $this->_lazyLoadPks['parent'];
      ]]></introduction>
      <introduction key="getParentIds" class="vo" type="method" value="getParentIds($taskId=NULL)"><![CDATA[
      // returns an array of task ids corresponding to all of the parents of 
      // this task from the immediate parent all the way to the top-level task 
      // of which it is a descendent. returns an empty array if this task does 
      // not have a parent. this method may also be invoked statically using the 
      // $taskId parameter
      static $_myProjectsCachedParentIds = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      $parentIds = array();
      if ($taskId && !isset($_myProjectsCachedParentIds[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        if ($parent = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $parentIds[] = $parent;
          $parentIds = array_merge($parentIds, MyProjectTaskVO::getParentIds($parent));
        }
        $_myProjectsCachedParentIds[$taskId] = $parentIds;
      }
      return $taskId ? $_myProjectsCachedParentIds[$taskId] : $parentIds;
      ]]></introduction>
      <introduction key="getPredecessorDueDate" class="vo" type="method" value="getPredecessorDueDate($taskId=NULL)"><![CDATA[
      // returns the predecessor due date or NULL if the task does not have a 
      // predecessor or if the predecessor does not have a due date. can be 
      // invoked statically using the $taskId parameter
      if (method_exists($this, 'isDirty') && $this->isDirty('predecessor')) {
        $predecessor =& $this->getPredecessor();
        return $predecessor ? $predecessor->getDueDate() : NULL;
      }
      
      static $_myProjectsCachedPredecessorDueDates = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      if ($taskId && !isset($_myProjectsCachedPredecessorDueDates[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        if ($predecessor = SRA_Database::getQueryValue($db, 'SELECT predecessor FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $_myProjectsCachedPredecessorDueDates[$taskId] = SRA_Database::getQueryValue($db, 'SELECT due_date FROM my_project_task WHERE task_id=' . $db->convertInt($predecessor), SRA_DATA_TYPE_DATE);
        }
      }
      return $taskId && isset($_myProjectsCachedPredecessorDueDates[$taskId]) ? $_myProjectsCachedPredecessorDueDates[$taskId] : NULL;
      ]]></introduction>
      <introduction key="getPredecessorName" class="vo" type="method" value="getPredecessorName($taskId=NULL)"><![CDATA[
      // returns the predecessor name or NULL if the task does not have a 
      // predecessor. can be invoked statically using the $taskId parameter
      static $_myProjectsCachedPredecessorNames = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      if ($taskId && !isset($_myProjectsCachedPredecessorNames[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        if ($predecessor = SRA_Database::getQueryValue($db, 'SELECT predecessor FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $_myProjectsCachedPredecessorNames[$taskId] = SRA_Database::getQueryValue($db, 'SELECT title FROM my_project_task WHERE task_id=' . $db->convertInt($predecessor));
        }
      }
      return $taskId && isset($_myProjectsCachedPredecessorNames[$taskId]) ? $_myProjectsCachedPredecessorNames[$taskId] : NULL;
      ]]></introduction>
      <introduction key="getProject" class="vo" type="method" value="&amp;getProject()"><![CDATA[
      // returns a reference to the project associated with this task
      $dao =& SRA_DaoFactory::getDao('MyProject');
      return $dao->findByPk($this->getProjectId());
      ]]></introduction>
      <introduction key="getProjectDueDate" class="vo" type="method" value="getProjectDueDate($taskId=NULL)"><![CDATA[
      // returns the project due date or NULL if the task task project does not 
      // have a due date. can be invoked statically using the $taskId parameter
      static $_myProjectsCachedProjectDueDates = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      if ($taskId && !isset($_myProjectsCachedProjectDueDates[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        if ($projectId = SRA_Database::getQueryValue($db, 'SELECT project_id FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $_myProjectsCachedProjectDueDates[$taskId] = SRA_Database::getQueryValue($db, 'SELECT due_date FROM my_project WHERE project_id=' . $db->convertInt($projectId), SRA_DATA_TYPE_DATE);
        }
      }
      return $taskId && isset($_myProjectsCachedProjectDueDates[$taskId]) ? $_myProjectsCachedProjectDueDates[$taskId] : NULL;
      ]]></introduction>
      <introduction key="getRfc2445Status" class="vo" type="method" value="getRfc2445Status()"><![CDATA[
      // returns the rfc2445 status code for this task (the iCal standard)
      switch ($this->getStatus()) {
        case MY_PROJECT_TASK_STATUS_COMPLETED: return 'COMPLETED';
        case MY_PROJECT_TASK_STATUS_ERROR: 
        case MY_PROJECT_TASK_STATUS_CANCELLED: return 'CANCELLED';
        default: return FALSE;
      }
      ]]></introduction>
      <introduction key="getSuccessorIds" class="vo" type="method" value="getSuccessorIds($taskId=NULL)"><![CDATA[
      // returns an array of task ids corresponding to all of the successors of 
      // this task or any of it's parents. returns an empty array if this task 
      // does not have any successors. this method may also be invoked 
      // statically using the $taskId parameter
      static $_myProjectsCachedSuccessorIds = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      
      $successorIds = array();
      if ($taskId && !isset($_myProjectsCachedSuccessorIds[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        $taskIds = ($parentIds = MyProjectTaskVO::getParentIds($taskId)) ? array_merge(array($taskId), $parentIds) : array($taskId);
        foreach($taskIds as $checkId) {
          $results =& $db->fetch('SELECT task_id FROM my_project_task WHERE predecessor=' . $db->convertInt($checkId), array(SRA_DATA_TYPE_INT));
          while($row =& $results->next()) {
            $successorIds[] = $row[0];
          }
          $_myProjectsCachedSuccessorIds[$checkId] = $successorIds;
        }
        $_myProjectsCachedSuccessorIds[$taskId] = $successorIds;
      }
      return $taskId && isset($_myProjectsCachedSuccessorIds[$taskId]) ? $_myProjectsCachedSuccessorIds[$taskId] : $successorIds;
      ]]></introduction>
      <introduction key="includeCore_Services" class="vo" type="include" value="plugins/core/Core_Services.php" />
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
      <introduction key="includeMyProjectsManagerDao" class="dao" type="include" value="plugins/productivity/MyProjectsManager.php" />
      <introduction key="includeMyProjectsManagerVo" class="vo" type="include" value="plugins/productivity/MyProjectsManager.php" />
      <introduction key="includeMyProjectsTemplate" class="dao" type="include" value="plugins/productivity/MyProjectsTemplate.php" />
      <introduction key="isAnyParentCompleted" class="vo" type="method" value="isAnyParentCompleted($taskId=NULL)"><![CDATA[
      // returns true if any of this tasks' parents are completed. can be 
      // invoked statically as well using the $taskId parameter
      static $_myProjectsCachedAnyParentCompleted = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if (!$taskId) { return FALSE; }
      
      if (!isset($_myProjectsCachedAnyParentCompleted[$taskId])) {
        $_myProjectsCachedAnyParentCompleted[$taskId] = FALSE;
        $db =& SRA_Controller::getAppDb();
        if ($parent = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $status = SRA_Database::getQueryValue($db, 'SELECT status FROM my_project_task WHERE task_id=' . $db->convertInt($parent));
          if (($status == MY_PROJECT_TASK_STATUS_COMPLETED) || MyProjectTaskVO::isAnyParentCompleted($parent)) { $_myProjectsCachedAnyParentCompleted[$taskId] = TRUE; }
        }
      }
      return $_myProjectsCachedAnyParentCompleted[$taskId];
      ]]></introduction>
      <introduction key="isChildrenCompleted" class="vo" type="method" value="isChildrenCompleted($taskId=NULL)"><![CDATA[
      // returns true if all of this task's children are completed (or 
      // cancelled). can be invoked statically as well using the $taskId 
      // parameter
      static $_myProjectsCachedChildrenCompleted = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if (!$taskId) { return FALSE; }
      
      if (!isset($_myProjectsCachedChildrenCompleted[$taskId])) {
        $_myProjectsCachedChildrenCompleted[$taskId] = TRUE;
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT task_id, status FROM my_project_task WHERE parent=' . $db->convertInt($taskId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_TEXT));
        while($row =& $results->next()) {
          if (($row[1] != MY_PROJECT_TASK_STATUS_COMPLETED && $row[1] != MY_PROJECT_TASK_STATUS_CANCELLED) || !MyProjectTaskVO::isChildrenCompleted($row[0])) { 
            $_myProjectsCachedChildrenCompleted[$taskId] = FALSE;
            break;
          }
        }
      }
      return $_myProjectsCachedChildrenCompleted[$taskId];
      ]]></introduction>
      <introduction key="isLate" class="vo" type="method" value="isLate()"><![CDATA[
      // returns TRUE if this task has a due date and it is currently past that 
      // date
      return ($dueDate =& $this->getDueDate()) && $dueDate->isPast();
      ]]></introduction>
      <introduction key="isUpcoming" class="vo" type="method" value="isUpcoming()"><![CDATA[
      // returns TRUE if this task has a due date and it is currently within the 
      // user's upcoming threshold
      global $user;
            return $user && ($dueDate =& $this->getDueDate()) && $user->isInMyProjectsUpcomingThreshold($dueDate);
      ]]></introduction>
      <introduction key="isMyParent" class="vo" type="method" value="isMyParent(&amp; $task)"><![CDATA[
      // instance method that returns true if $task is a parent of this task
      return MyProjectTaskVO::isParent($task->getTaskId(), $this->getTaskId());
      ]]></introduction>
      <introduction key="isParent" class="vo" type="method" value="isParent($parentId, $childId)"><![CDATA[
      // static method that returns true if the task with id $parentId is a 
      // parent of the task with id $childId
      static $_myProjectsCachedIsParent = array();
      $cacheKey = $parentId . '_' . $childId;
      
      if (!isset($_myProjectsCachedIsParent[$cacheKey])) {
        // child is immediate sub-task of parent
        $db =& SRA_Controller::getAppDb();
        if ($childId && ($childParentId = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $childId)) && $childParentId == $parentId) {
          $_myProjectsCachedIsParent[$cacheKey] = TRUE;
        }
        // check if child is a descendent of parent
        else if ($childParentId) {
          $_myProjectsCachedIsParent[$cacheKey] = MyProjectTaskVO::isParent($parentId, $childParentId);
        }
        // top of child parent hierarchy reached without a match, so no 
        // parent/child relationship exists
        else {
          $_myProjectsCachedIsParent[$cacheKey] = FALSE;
        }
      }
      return $_myProjectsCachedIsParent[$cacheKey];
      ]]></introduction>
      <introduction key="isParentCompleted" class="vo" type="method" value="isParentCompleted($taskId=NULL)"><![CDATA[
      // returns true if all of this tasks' non-list parents are completed (or 
      // cancelled). can be invoked statically as well using the $taskId 
      // parameter. returns FALSE if the task does not have a parent
      static $_myProjectsCachedIsParentCompleted = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if (!$taskId) { return FALSE; }
      
      if (!isset($_myProjectsCachedIsParentCompleted[$taskId])) {
        $_myProjectsCachedIsParentCompleted[$taskId] = FALSE;
        $db =& SRA_Controller::getAppDb();
        if ($parent = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          if (SRA_Database::getQueryValue($db, 'SELECT count(*) FROM my_project_task WHERE task_id=' . $db->convertInt($parent) . ' AND status = ' . $db->convertText(MY_PROJECT_TASK_STATUS_COMPLETED) . ' AND list = ' . $db->convertBoolean(FALSE)) || MyProjectTaskVO::isParentCompleted($parent)) { $_myProjectsCachedIsParentCompleted[$taskId] = TRUE; }
        }
      }
      return $_myProjectsCachedIsParentCompleted[$taskId];
      ]]></introduction>
      <introduction key="isPartOfWfStep" class="vo" type="method" value="isPartOfWfStep($taskId=NULL)"><![CDATA[
      // returns true if this task is part of a workflow step (when the parent 
      // task is assigned to a wf step). can be invoked statically as well using 
      // the $taskId parameter
      static $_myProjectsCachedIsPartOfWfStep = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if ($taskId && !isset($_myProjectsCachedIsPartOfWfStep[$taskId])) {
        $db =& SRA_Controller::getAppDb();
        $_myProjectsCachedIsPartOfWfStep[$taskId] = SRA_Database::getQueryValue($db, 'SELECT parent FROM my_project_task WHERE task_id=' . $db->convertInt($taskId)) ? TRUE : FALSE;
      }
      return $taskId ? $_myProjectsCachedIsPartOfWfStep[$taskId] : FALSE;
      ]]></introduction>
      <introduction key="isPredecessorCompleted" class="vo" type="method" value="isPredecessorCompleted($taskId=NULL)"><![CDATA[
      // returns true if this task's predecessor is completed (or cancelled) or 
      // if this task does not have a predecessor. can be invoked statically as 
      // well using the $taskId parameter
      static $_myProjectsCachedIsPredecessorCompleted = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if (!$taskId) { return FALSE; }
      
      if (!isset($_myProjectsCachedIsPredecessorCompleted[$taskId])) {
        $_myProjectsCachedIsPredecessorCompleted[$taskId] = TRUE;
        $db =& SRA_Controller::getAppDb();
        if ($predecessor = SRA_Database::getQueryValue($db, 'SELECT predecessor FROM my_project_task WHERE task_id=' . $db->convertInt($taskId))) {
          $status = SRA_Database::getQueryValue($db, 'SELECT status FROM my_project_task WHERE task_id=' . $db->convertInt($predecessor));
          if ($status != MY_PROJECT_TASK_STATUS_COMPLETED && $status != MY_PROJECT_TASK_STATUS_CANCELLED) { $_myProjectsCachedIsPredecessorCompleted[$taskId] = FALSE; }
        }
      }
      return $_myProjectsCachedIsPredecessorCompleted[$taskId];
      ]]></introduction>
      <introduction key="isResponsibleForPid" class="vo" type="method" value="isResponsibleForPid($pid, $taskId=NULL)"><![CDATA[
      // shortcut to 'isResponsibleFor' where $pid is an encoded participant id
      // using the following format:
      // c[id]: id=uid
      // p[id]: id=participant id
      // e[id]: id=email participant id if numeric, email address otherwise
      // u[id]: id=uid
      // g[id]: id=gid
      $id = substr($pid, 1);
      $key = strtolower(substr($pid, 0, 1));
      $taskId = $taskId ? $taskId : $this->getTaskId();
      $responsibleFor = MyProjectTaskVO::isResponsibleFor($key == 'c' || $key == 'u' ? $id*1 : NULL, $key == 'g' ? $id*1 : NULL, $key == 'e' && !is_numeric($id) ? $id : NULL, $key == 'p' ? $id*1 : NULL, $key == 'e' && is_numeric($id) ? $id*1 : NULL, $taskId);
      return $responsibleFor;
      ]]></introduction>
      <introduction key="isResponsibleFor" class="vo" type="method" value="isResponsibleFor($uid=NULL, $gid=NULL, $email=NULL, $participantId=NULL, $emailParticipantId=NULL, $taskId=NULL)"><![CDATA[
      // returns TRUE if the user identified by $uid, the group identified by 
      // $gid, the email identified by $email, the participant identified by 
      // $participantId or the email participant identified by 
      // $emailParticipantId has responsibility for this task (or the task 
      // identified by $taskId if specified). if neither $uid, $gid, $email, 
      // $participantId nor $emailParticipantId is specified, the current user 
      // $uid will be evaluated as if it had been passed in as the $uid 
      // parameter
      static $_myProjectParticipantIds = array();
      global $user;
      
      $responsibleFor = FALSE;
      if ($user && !$uid && !$gid && !$email && !$participantId && !$emailParticipantId) {
        $uid = $user->getUid();
      }
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if ($taskId && ($uid || $gid || $email || $participantId || $emailParticipantId)) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT project_id, creator, change_restriction, change_restriction_email, strict_permissions FROM my_project_task WHERE task_id=' . $taskId, array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_BOOLEAN));
        if ($row =& $results->next()) {
          $cacheKey = $row[0] . '-' . ($uid ? 'u' . $uid : ($gid ? 'g' . $gid : 'e' . $email));
          if (!isset($_myProjectParticipantIds[$cacheKey])) {
            if ($uid) {
              if (!$user) {
                $dao =& SRA_DaoFactory::getDao('OsUser');
                $tuser =& $dao->findByPk($uid);
                if (!OsUserVO::isValid($tuser)) { $tuser = NULL; }
              }
              $_myProjectParticipantIds[$cacheKey] = array();
              if ($id = SRA_Database::getQueryValue($db, 'SELECT participant_id FROM my_project_participant WHERE project_id=' . $row[0] . ' AND is_group=' . $db->convertBoolean(FALSE) . ' AND id=' . $uid)) {
                $_myProjectParticipantIds[$cacheKey][] = $id;
              }
              if (($user || $tuser) && ($gids = $user ? $user->getAllGids() : $tuser->getAllGids())) {
                $presults =& $db->fetch('SELECT participant_id FROM my_project_participant WHERE project_id=' . $row[0] . ' AND is_group=' . $db->convertBoolean(TRUE) . ' AND id IN (' . implode(', ', $gids) . ')', array(SRA_DATA_TYPE_INT));
                while($prow =& $presults->next()) {
                  $_myProjectParticipantIds[$cacheKey][] = $prow[0];
                }
              }
            }
            else if ($gid) {
              $_myProjectParticipantIds[$cacheKey] = ($id = SRA_Database::getQueryValue($db, 'SELECT participant_id FROM my_project_participant WHERE project_id=' . $row[0] . ' AND is_group=' . $db->convertBoolean(TRUE) . ' AND id=' . $gid)) ? $id : FALSE;
            }
            else {
              $_myProjectParticipantIds[$cacheKey] = ($id = SRA_Database::getQueryValue($db, 'SELECT participant_id FROM my_project_email_participant WHERE project_id=' . $row[0] . ' AND email=' . $db->convertText($email))) ? $id : FALSE;
            }
          }
          
          if ($uid && ((!$row[4] && $uid == $row[1]) || ($_myProjectParticipantIds[$cacheKey] && !$row[3] && in_array($row[2], $_myProjectParticipantIds[$cacheKey])))) { $responsibleFor = TRUE; }
          if ($gid && $_myProjectParticipantIds[$cacheKey] && !$row[3] && $row[2] == $_myProjectParticipantIds[$cacheKey]) { $responsibleFor = TRUE; }
          if ($email && $_myProjectParticipantIds[$cacheKey] && $row[3] && $row[2] == $_myProjectParticipantIds[$cacheKey]) { $responsibleFor = TRUE; }
          if ($participantId && !$row[3] && $row[2] == $participantId) { $responsibleFor = TRUE; }
          if ($emailParticipantId && $row[3] && $row[2] == $emailParticipantId) { $responsibleFor = TRUE; }
        }
      }
      return $responsibleFor;
      ]]></introduction>
      <introduction key="isSuccessorCompleted" class="vo" type="method" value="isSuccessorCompleted($taskId=NULL)"><![CDATA[
      // returns true if this task does not have any successors or if it does 
      // but they are all completed or cancelled. returns false otherwise. can 
      // also be invoked statically using the $taskId parameter
      static $_myProjectsCachedIsSuccessorCompleted = array();
      
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if (!$taskId) { return FALSE; }
      
      if (!isset($_myProjectsCachedIsSuccessorCompleted[$taskId])) {
        $_myProjectsCachedIsSuccessorCompleted[$taskId] = FALSE;
        $db =& SRA_Controller::getAppDb();
        
        $taskIds = ($parentIds = MyProjectTaskVO::getParentIds($taskId)) ? array_merge(array($taskId), $parentIds) : array($taskId);
        foreach($taskIds as $checkId) {
          if (SRA_Database::getQueryValue($db, 'SELECT count(*) FROM my_project_task WHERE predecessor=' . $db->convertInt($checkId) . ' AND status = ' . $db->convertText(MY_PROJECT_TASK_STATUS_COMPLETED), SRA_DATA_TYPE_INT)) {
            $_myProjectsCachedIsSuccessorCompleted[$taskId] = TRUE;
            $_myProjectsCachedIsSuccessorCompleted[$checkId] = TRUE;
            break;
          }
        }
      }
      return $_myProjectsCachedIsSuccessorCompleted[$taskId];
      ]]></introduction>
      <introduction key="isTerminal" class="vo" type="method" value="isTerminal()"><![CDATA[
      // returns TRUE if this task status is terminal
      return MyProjectVO::isStatusTerminal($this->getStatus());
      ]]></introduction>
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($taskId=NULL)"><![CDATA[
      // returns true if this task is read-only for the current user. can be 
      // invoked either statically using the $taskId or within a task instance
      static $_cachedTaskReadOnlyQueries = array();
      
      global $user;
      $taskId = $taskId ? $taskId : $this->getTaskId();
      if ($user && $taskId && !isset($_cachedTaskReadOnlyQueries[$user->getUid() . '_' . $taskId])) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT change_restriction, creator, project_id, read_only, strict_permissions FROM my_project_task WHERE task_id=' . $db->convertInt($taskId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN, SRA_DATA_TYPE_BOOLEAN));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          $_cachedTaskReadOnlyQueries[$user->getUid() . '_' . $taskId] = !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_TASKS_WRITE, $row[2]) || (($row[4] && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_TASKS_WRITE, $row[2], $row[0], TRUE)) || (!$row[4] && $row[3] && $row[1] != $user->getUid() && MyProjectVO::getUserPermissions($row[2]) != MY_PROJECT_PERMISSIONS_ADMIN));
        }
      }
      return $user && $taskId ? $_cachedTaskReadOnlyQueries[$user->getUid() . '_' . $taskId] : TRUE;
      ]]></introduction>
      <introduction key="normalizeDuration" class="vo" type="method" value="normalizeDuration($duration)"><![CDATA[
      // normalizes a duration value to a minute value where $duration is a 
      // numeric value followed by one of the following quantity suffixes:
      // h: hour (default if no suffix exists), d: day, w: week, m: month or 
      // y: year. returns NULL if $duration is not valid
      if ($duration) {
        $suffix = substr($duration, -1);
        $normalized = is_numeric($suffix) ? $duration : substr($duration, 0, -1);
        $suffix = is_numeric($suffix) ? 'h' : $suffix;
      }
      if (is_numeric($normalized) && in_array(strtolower($suffix), array('h', 'd', 'w', 'm', 'y'))) {
        switch($suffix) {
          case 'h':
            $normalized *= MY_PROJECT_TASK_DURATION_NORMALIZE_HOUR;
            break;
          case 'd':
            $normalized *= MY_PROJECT_TASK_DURATION_NORMALIZE_DAY;
            break;
          case 'w':
            $normalized *= MY_PROJECT_TASK_DURATION_NORMALIZE_WEEK;
            break;
          case 'm':
            $normalized *= MY_PROJECT_TASK_DURATION_NORMALIZE_MONTH;
            break;
          case 'y':
            $normalized *= MY_PROJECT_TASK_DURATION_NORMALIZE_YEAR;
            break;
        }
      }
      else {
        $normalized = NULL;
      }
      return $normalized;
      ]]></introduction>
      <introduction key="updateProjectId" class="vo" type="method" value="_updateProjectId($oldProjectId)"><![CDATA[
      global $_myProjectsTaskUpdatingProjectId;
      if (!$_myProjectsTaskUpdatingProjectId) { $_myProjectsTaskUpdatingProjectId = array(); }
      
      if (!$_myProjectsTaskUpdatingProjectId[$this->getPrimaryKey()]) {
        $_myProjectsTaskUpdatingProjectId[$this->getPrimaryKey()] = TRUE;
        
        // files
        $files =& $this->getFiles();
        $keys = array_keys($files);
        foreach($keys as $key) {
          $files[$key]->setProjectId($this->getProjectId());
          $files[$key]->update();
        }
        
        // messages
        $messages =& $this->getMessages();
        $keys = array_keys($messages);
        foreach($keys as $key) {
          $messages[$key]->setProjectId($this->getProjectId());
          $messages[$key]->update();
        }
        
        // parent
        if ($parent =& $this->getParent()) {
          $parent->setProjectId($this->getProjectId());
          $parent->update();
        }
        
        // predecessor - remove
        if ($this->getPredecessor()) {
          $this->setPredecessor(NULL, FALSE);
          $db =& SRA_Controller::getAppDb();
          $db->execute('UPDATE my_project_task SET predecessor=' . $db->convertInt(NULL) . ' WHERE task_id=' . $this->getPrimaryKey());
        }
        
        // sub tasks
        $subTasks =& $this->getSubTasks();
        $keys = array_keys($subTasks);
        foreach($keys as $key) {
          $subTasks[$key]->setProjectId($this->getProjectId());
          $subTasks[$key]->update();
        }
        
        // whiteboards
        $whiteboards =& $this->getWhiteboards();
        $keys = array_keys($whiteboards);
        foreach($keys as $key) {
          $whiteboards[$key]->setProjectId($this->getProjectId());
          $whiteboards[$key]->update();
        }
        
        MyProjectVO::rebuildSearchIndex($oldProjectId);
        unset($_myProjectsTaskUpdatingProjectId[$this->getPrimaryKey()]);
      }
      ]]></introduction>
      <introduction key="MY_PROJECT_TASK_DURATION_NORMALIZE_HOUR" class="vo" type="constant" value="MY_PROJECT_TASK_DURATION_NORMALIZE_HOUR=1" />
      <introduction key="MY_PROJECT_TASK_DURATION_NORMALIZE_DAY" class="vo" type="constant" value="MY_PROJECT_TASK_DURATION_NORMALIZE_DAY=8" />
      <introduction key="MY_PROJECT_TASK_DURATION_NORMALIZE_WEEK" class="vo" type="constant" value="MY_PROJECT_TASK_DURATION_NORMALIZE_WEEK=40" />
      <introduction key="MY_PROJECT_TASK_DURATION_NORMALIZE_MONTH" class="vo" type="constant" value="MY_PROJECT_TASK_DURATION_NORMALIZE_MONTH=174" />
      <introduction key="MY_PROJECT_TASK_DURATION_NORMALIZE_YEAR" class="vo" type="constant" value="MY_PROJECT_TASK_DURATION_NORMALIZE_YEAR=2087" />
      <introduction key="MY_PROJECT_TASK_STATUS_ACTIVE" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_ACTIVE='active'" />
      <introduction key="MY_PROJECT_TASK_STATUS_CANCELLED" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_CANCELLED='cancelled'" />
      <introduction key="MY_PROJECT_TASK_STATUS_COMPLETED" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_COMPLETED='completed'" />
      <introduction key="MY_PROJECT_TASK_STATUS_ERROR" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_ERROR='error'" />
      <introduction key="MY_PROJECT_TASK_STATUS_HOLD" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_HOLD='hold'" />
      <introduction key="MY_PROJECT_TASK_STATUS_WAIT" class="vo" type="constant" value="MY_PROJECT_TASK_STATUS_WAIT='wait'" />
    </aop>
    <attribute key="taskId" sequence="1" />
    <attribute key="changeRestriction" type="int" />
    <attribute key="changeRestrictionEmail" type="boolean" />
    <attribute key="completeConfirm" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="description" set-convert="strip_tags" sync-attributes="descriptionHtml" />
    <attribute key="descriptionHtml" set-convert="Core_Services_wikiToHtml">
      <view key="output" extends="text-not-specified" />
    </attribute>
    <attribute key="disabled" type="boolean" />
    <attribute key="dueDate" type="date" />
    <attribute key="durationActual" max-length="8" />
    <attribute key="durationPlanned" max-length="8" />
    <attribute key="ended" type="date" />
    <attribute key="files" cardinality="0..*" type="MyProjectFile" />
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="list" type="boolean" />
    <attribute key="messages" cardinality="0..*" type="MyProjectMessage" />
    <attribute key="notify" default="FALSE" type="boolean" />
    <attribute key="notifySubject" />
    <attribute key="notifyTpl" />
    <attribute key="notifyTplHtml" />
    <attribute key="parent" type="MyProjectTask" />
    <attribute key="percentComplete" depends="range" type="int">
      <var key="min" value="0" />
      <var key="max" value="100" />
    </attribute>
    <attribute key="predecessor" type="MyProjectTask" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="readOnly" type="boolean" />
    <attribute key="startDate" type="date" />
    <attribute key="status" default="active" depends="option" max-length="16">
      <var key="options" value="text.status.active=active text.status.wait=wait text.status.hold=hold text.status.completed=completed text.status.cancelled=cancelled text.status.error=error" />
    </attribute>
    <attribute key="strictPermissions" type="boolean" />
    <attribute key="subTasks" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" table-pk-column="parent" type="MyProjectTask" />
    <attribute key="title" depends="required" max-length="255" set-convert="strip_tags" />
    <attribute key="wfLocked" type="boolean" />
    <attribute key="wfStepId" type="int" />
    <attribute key="wfTaskId" type="int" />
    <attribute key="whiteboards" cardinality="0..*" type="MyProjectWhiteboard" />
    
    <view key="print" template="plugins/productivity/my-projects-task-print.tpl" />
  </entity>
  
  <entity key="MyProjectWhiteboard" primary-key="whiteboardId" render-append="isUserReadOnly" render-exclude="activeBgFile activeByteCount activePid activePort activePortPrinter activePortUsers calculateSize thumbnail whiteboard">
    <ajax-service key="myProjectWhiteboardService" create="1" delete="1" update="1" />
    <aop>
      <advice key="resizeWhiteboard"><![CDATA[
      $identifyCmd = dirname(SRA_FILE_ATTRIBUTE_IMAGE_MAGICK_CONVERT) . '/identify';
      if (file_exists($identifyCmd) && is_executable($identifyCmd) && $record && $record->isCalculateSize() && $record->isDirty('whiteboard') && SRA_FileAttribute::isValid($whiteboard =& $record->getWhiteboard())) {
        $tmpFile = SRA_File::createRandomFile(NULL, '', '.' . SRA_Util::getFileExtension($whiteboard->getName()));
        $whiteboard->writeToFile($tmpFile);
        exec($identifyCmd . ' ' . $tmpFile, $output);
        if (preg_match('/\d+x\d+/', implode('', $output), $matches) && $matches[0] && count($pieces = explode('x', $matches[0])) == 2) {
          $record->setWidth($pieces[0]);
          $record->setHeight($pieces[1]);
        }
        SRA_File::unlink($tmpFile);
        $record->setCalculateSize(FALSE);
      }
      else if ($record && !$record->_daoResized && $record->validate() && $record->isDirty(array('height', 'whiteboard', 'width')) && ($record->getHeight() || $record->getWidth()) && SRA_FileAttribute::isValid($whiteboard =& $record->getWhiteboard())) {
        if ($newImage = $whiteboard->resizeImage($record->getHeight(), $record->getWidth(), FALSE)) {
          $record->setWhiteboard($newImage);
          SRA_File::unlink($newImage);
        }
        $record->_daoResized = TRUE;
      }
      ]]></advice>
      <advice key="updateSearchIndex"><![CDATA[
      if (($updated || $inserted) && (isset($oldDirtyFlags['title']))) { MyProjectVO::rebuildSearchIndex($record->getProjectId()); }
      ]]></advice>
      <advice key="verifyReadPermissions"><![CDATA[
      if (!$this->_updatingFromDrawboard && $this->recordExists && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_WHITEBOARDS_READ, $this->getProjectId())) {
        global $user;
        return SRA_Error::logError('MyProjectWhiteboardVO: Error - Invalid attempt to access whiteboard ' . $this->getPrimaryKey() . ' in project ' . $this->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      ]]></advice>
      
      <aspect key="addGlobalUser" pointcut="vo.getDefaultAttributeValue"><![CDATA[ global $user; ]]></aspect>
      <aspect key="manageActiveBgFile" pointcut="dao.update"><![CDATA[
      if ($record && $record->recordExists && $record->validate() && $record->isDirty('active') && $record->getActivePort()) {
        if ($record->isActive()) {
          $whiteboard =& $record->getWhiteboard();
          $tmpFile = SRA_File::createRandomFile(NULL, '', '.' . SRA_Util::getFileExtension($whiteboard->getName()));
          $whiteboard->writeToFile($tmpFile);
          $record->setActiveBgFile($tmpFile);
        }
        else {
          $record->setActive(TRUE);
          unset($record->_dirty['active']);
          $record->updateFromDrawboard();
          $record->setActive(FALSE);
          
          require_once('plugins/productivity/MyProjectsManager.php');
          $drawboardConf =& MyProjectsManager::getDrawboardConf();
          
          // delete temporary background file
          if (file_exists($record->getActiveBgFile())) { SRA_File::unlink($record->getActiveBgFile()); }
          $record->setActiveBgFile();
          
          // delete log file
          if ($drawboardConf['log'] && file_exists($drawboardConf['log'] . $record->getActivePort())) { SRA_File::unlink($drawboardConf['log'] . $record->getActivePort()); }
          
          // kill drawboard process and reset attributes
          if ($record->getActivePid() && SRA_Util::getProcessName($record->getActivePid())) {
            SRA_Util::killProcess($record->getActivePid());
          }
          $record->setActivePid(NULL);
          $record->setActivePort(NULL);
          $record->setActivePortPrinter(NULL);
          $record->setActivePortUsers(NULL);
          $record->setActiveUsers(NULL);
        }
      }
      ]]></aspect>
      <aspect key="resizeWhiteboardInsert" advice="resizeWhiteboard" pointcut="dao.insert" />
      <aspect key="resizeWhiteboardUpdate" advice="resizeWhiteboard" pointcut="dao.update" />
      <aspect key="setCategory" pointcut="vo.setCategory"><![CDATA[
      // validate category and convert to label if $category is a categoryId
      $db =& SRA_Controller::getAppDb();
      if ($category && $this->_projectId && !SRA_Database::getRecordCount($db, 'SELECT category_id FROM my_project_message_category WHERE project_id=' . $this->_projectId . ' AND name=' . $db->convertText($category))) {
        $category = is_numeric($category) && ($name = SRA_Database::getQueryValue($db, 'SELECT name FROM my_project_message_category WHERE project_id=' . $this->_projectId . ' AND category_id=' . $category)) ? $name : (SRA_ResourceBundle::isValid($rb =& $this->getEntityResources()) && $rb->containsKey($category) ? $rb->getString($category) : NULL);
      }
      ]]></aspect>
      <aspect key="setDefaultWhiteboard" pointcut="vo.validate"><![CDATA[
      if (!$this->recordExists && !$this->getWhiteboard()) {
        $whiteboard = SRA_Controller::getAppDir() . '/plugins/productivity/etc/blank-whiteboard.png';
        $this->setWhiteboard($whiteboard);
      }
      ]]></aspect>
      <aspect key="setLastUpdated" pointcut="vo.validate"><![CDATA[
      if ($this->isDirty()) {
        $this->setLastUpdated(new SRA_GregorianDate());
        
        global $user;
        if ($user) {
          $this->setLastUpdatedBy($user->getName());
        }
      }
      ]]></aspect>
      <aspect key="setOldProjectId" pointcut="dao.update"><![CDATA[
      if ($record->isDirty('projectId')) { 
        $oldProjectId = $record->getProjectId(TRUE);
        if ($record->getCategory() && !SRA_Database::getRecordCount($this->_db, 'SELECT category_id FROM my_project_message_category WHERE project_id=' . $record->getProjectId() . ' AND name=' . $this->_db->convertText($record->getCategory()))) { $record->setCategory(NULL); }
        if (!$record->isDirty('changeRestriction')) { $record->setChangeRestriction(); }
        global $_myProjectsTaskUpdatingProjectId;
        if ($record->getTaskId() && (!$_myProjectsTaskUpdatingProjectId || !$_myProjectsTaskUpdatingProjectId[$record->getTaskId()])) { $record->setTaskId(NULL); }
      }
      ]]></aspect>
      <aspect key="setProjectIdComments" pointcut="vo.addComments"><![CDATA[
      if (is_array($comments)) {
        $keys = array_keys($comments);
        foreach($keys as $key) {
          $comments[$key]->setProjectId($this->getProjectId());
        }
      }
      else if (MyProjectCommentVO::isValid($comments)) {
        $comments->setProjectId($this->getProjectId());
      }
      ]]></aspect>
      <aspect key="setWhiteboardIdSubscribers" pointcut="vo.addSubscribers"><![CDATA[
      if (is_array($subscribers)) {
        $keys = array_keys($subscribers);
        foreach($keys as $key) {
          $subscribers[$key]->setWhiteboardId($this->getWhiteboardId());
        }
      }
      else if (MyProjectDiscussionSubscriberVO::isValid($subscribers)) {
        $subscribers->setWhiteboardId($this->getWhiteboardId());
      }
      ]]></aspect>
      <aspect key="updateProjectId" pointcut="dao.update" when="after"><![CDATA[
      // project changed, update relational attributes with new project id
      if ($oldProjectId && $updated) {
        $record->_updateProjectId($oldProjectId);
      }
      ]]></aspect>
      <aspect key="updateSearchIndexInsert" advice="updateSearchIndex" pointcut="dao.insert" when="after" />
      <aspect key="updateSearchIndexUpdate" advice="updateSearchIndex" pointcut="dao.update" when="after" />
      <aspect key="verifyDeletePermissions" pointcut="dao.delete"><![CDATA[
      global $user;
      if (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE, $record->getProjectId(), $record->getAttribute('changeRestriction_participantId'))) {
        SRA_Error::logError('MyProjectWhiteboardDAO::delete: Error - Invalid attempt to delete project whiteboard ' . $record->getTitle() . ' in project ' . $record->getProjectId() . ' was attempted by user ' . ($user ? $user->getUid() : '') . ' at IP ' . $_SERVER['REMOTE_ADDR'], __FILE__, __LINE__);
      }
      if ($record->isActive()) {
        $record->setActive(FALSE);
        $record->update();
      }
      ]]></aspect>
      <aspect key="verifyNotActive" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->_updatingFromDrawboard && !$this->validateErrors && !$this->isDirty('active') && $this->isDirty() && $this->isActive()) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectWhiteboard.error.whiteboardIsActive');
      }
      ]]></aspect>
      <aspect key="verifyReadPermissionsTitle" advice="verifyReadPermissions" pointcut="vo.getTitle" />
      <aspect key="verifyReadPermissionsWhiteboard" advice="verifyReadPermissions" pointcut="vo.getWhiteboard" />
      <aspect key="verifyWritePermissions" pointcut="vo.validate" when="after"><![CDATA[
      if (!$this->_updatingFromDrawboard && !$this->validateErrors && $this->isDirty() && !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE, $this->getProjectId(), $this->getAttribute('changeRestriction_participantId'))) {
        $resources =& $this->getEntityResources();
        $this->validateErrors[] = $resources->getString('MyProjectWhiteboard.error.noWriteAccess');
      }
      ]]></aspect>
      
      <introduction key="isUserReadOnly" class="vo" type="method" value="isUserReadOnly($whiteboardId=NULL)"><![CDATA[
      // returns true if this whiteboard is read-only for the current user. can be 
      // invoked either statically using the $whiteboardId or within a whiteboard instance
      if ($this->_updatingFromDrawboard) { return FALSE; }
      
      global $user;
      $whiteboardId = $whiteboardId ? $whiteboardId : $this->getWhiteboardId();
      if ($user && $whiteboardId) {
        $db =& SRA_Controller::getAppDb();
        $results =& $db->fetch('SELECT change_restriction, creator, project_id, read_only FROM my_project_whiteboard WHERE whiteboard_id=' . $db->convertInt($whiteboardId), array(SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_INT, SRA_DATA_TYPE_BOOLEAN));
        if (!SRA_Error::isError($results) && ($row =& $results->next())) {
          return !MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE, $row[2]) || (!MyProjectVO::verifyPermissions(MY_PROJECT_PERMISSIONS_WHITEBOARDS_WRITE, $row[2], $row[0], TRUE) || ($row[3] && !in_array($row[1], $user->getAllUids()) && MyProjectVO::getUserPermissions($row[2]) != MY_PROJECT_PERMISSIONS_ADMIN));
        }
      }
      return TRUE;
      ]]></introduction>
      <introduction key="updateFromDrawboard" class="vo" type="method" value="updateFromDrawboard()"><![CDATA[
      // updates the active user account and whiteboard image using the 
      // drawboard user and printer ports (if it is active). returns TRUE if an 
      // update occurred, FALSE otherwise
      if ($this->isActive()) {
        $this->_updatingFromDrawboard = TRUE;
        
        // update active users count
        $fp = fsockopen('localhost', $this->getActivePortUsers(), $errno, $errstr, 5);
        if (!$fp) {
          SRA_Error::logError('MyProjectsWhiteboard::updateFromDrawboard - Failed: Unable to get user count for whiteboard ' . $this->getPrimaryKey() . " from drawboard due to the following error: $errstr ($errno)", __FILE__, __LINE__);
        } 
        else {
          $userCount = substr(fgets($fp, 1024), 1);
          fclose($fp);
          $this->setActiveUsers($userCount);
        }
        
        // update whiteboard
        if ($wget = SRA_File::findInPath('wget')) {
          exec($wget . ' -O ' . ($tmpFile = SRA_File::createRandomFile()) . ' http://localhost:' . $this->getActivePortPrinter());
          $count = filesize($tmpFile);
        }
        else {
          $bytes = file_get_contents('http://localhost:' . $this->getActivePortPrinter());
          $count = strlen($bytes);
        }
        if (!$count) {
          SRA_Error::logError('MyProjectsWhiteboard::updateFromDrawboard - Failed: Unable to get drawboard image from printer port for whiteboard ' . $this->getPrimaryKey(), __FILE__, __LINE__);
        } 
        else {
          $this->getWhiteboard();
          $diff = abs($count - $this->getActiveByteCount());
          if ($diff) {
            if (!$tmpFile) { 
              SRA_File::write($tmpFile = SRA_File::createRandomFile(NULL, '', '.' . SRA_Util::getFileExtension($this->_whiteboard->getName())), $bytes); 
            }
            else {
              SRA_File::rename($tmpFile, $tmpFile . '.' . SRA_Util::getFileExtension($this->_whiteboard->getName()));
              $tmpFile .= '.' . SRA_Util::getFileExtension($this->_whiteboard->getName());
            }
            $this->setWhiteboard($tmpFile);
            $this->setActiveByteCount($count);
          }
        }
        
        $updated = $this->isDirty(array('activeUsers', 'whiteboard'));
        if ($updated) {
          $this->update();
          if (file_exists($tmpFile)) { SRA_File::unlink($tmpFile); }
        }
        return $updated;
      }
      return FALSE;
      ]]></introduction>
      <introduction key="includeMyProject" class="dao" type="include" value="model/MyProjectVO.php" />
      <introduction key="updateProjectId" class="vo" type="method" value="_updateProjectId($oldProjectId)"><![CDATA[
      global $_myProjectsWhiteboardUpdatingProjectId;
      if (!$_myProjectsWhiteboardUpdatingProjectId) { $_myProjectsWhiteboardUpdatingProjectId = array(); }
      
      if (!$_myProjectsWhiteboardUpdatingProjectId[$this->getPrimaryKey()]) {
        $_myProjectsWhiteboardUpdatingProjectId[$this->getPrimaryKey()] = TRUE;
        // comments
        $comments =& $this->getComments();
        $keys = array_keys($comments);
        foreach($keys as $key) {
          $comments[$key]->setProjectId($this->getProjectId());
          $comments[$key]->update();
        }
        // get rid of old project subscribers
        $subscribers =& $this->getSubscribers();
        $keys = array_keys($subscribers);
        foreach($keys as $key) {
          if ($subscribers[$key]->getProjectId() == $oldProjectId) {
            $subscribers[$key]->delete();
          }
        }
        MyProjectVO::rebuildSearchIndex($oldProjectId);
        unset($_myProjectsWhiteboardUpdatingProjectId[$this->getPrimaryKey()]);
      }
      ]]></introduction>
    </aop>
    <attribute key="whiteboardId" sequence="1" />
    <attribute key="active" type="boolean" />
    <attribute key="activeBgFile" />
    <attribute key="activeByteCount" type="int" />
    <attribute key="activePid" type="int" />
    <attribute key="activePort" type="int" />
    <attribute key="activePortPrinter" type="int" />
    <attribute key="activePortUsers" type="int" />
    <attribute key="activeUsers" type="int" />
    <attribute key="calculateSize" skip-persistence="1" type="boolean" />
    <attribute key="category" max-length="128" />
    <attribute key="changeRestriction" type="MyProjectParticipant" />
    <attribute key="comments" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectComment" />
    <attribute key="created" default="new SRA_GregorianDate()" type="time" />
    <attribute key="creator" default="$user-&gt;getUid()" depends="required" type="int" />
    <attribute key="height" default="480" depends="min max required" type="int">
      <var key="min" value="100" />
      <var key="max" value="1600" />
    </attribute>
    <attribute key="lastUpdated" default="new SRA_GregorianDate()" type="time" />
    <attribute key="lastUpdatedBy" depends="required" max-length="128" />
    <attribute key="projectId" depends="required" type="int" />
    <attribute key="readOnly" type="boolean" />
    <attribute key="subscribers" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectDiscussionSubscriber" />
    <attribute key="taskId" type="int" />
    <attribute key="title" depends="required" max-length="255" set-convert="strip_tags" />
    <attribute key="thumbnail" file-uri-attr="thumbnailUri" is-file="1" lazy-load-exclusive="1" type="blob" />
    <attribute key="thumbnailUri" max-length="255" />
    <attribute key="whiteboard" depends="mimeType required" file-uri-attr="whiteboardUri" is-file="1" lazy-load-exclusive="1" max-length="16777215" type="blob">
      <thumbnail key="thumbnail" width="200" />
      <var key="mimeTypes" value="image/png" />
    </attribute>
    <attribute key="whiteboardUri" max-length="255" />
    <attribute key="width" default="640" depends="min max required" type="int">
      <var key="min" value="100" />
      <var key="max" value="1600" />
    </attribute>
  </entity>
  

  <entity key="MyProjectsSavedSearch" primary-key="searchId">
    <ajax-service key="myProjectsManageSavedSearches" create="1" delete="1" update="1">
      <ajax-constraint-group key="setUid">
        <ajax-constraint auto-set="1" attr="uid" value="user_uid" value-type="global" />
      </ajax-constraint-group>
    </ajax-service>
    <aop>
      <introduction key="getProjectIds" class="vo" type="method" value="getProjectIds()"><![CDATA[
      // returns the project ids currently associated to this saved search
      require_once('plugins/productivity/MyProjectsManager.php');
      
      $params = array();
      if ($this->getEnd()) { $params['ended'] =& $this->getEnd(); }
      if ($this->isIncludeArchived()) { $params['includeArchived'] = TRUE; }
      if ($this->getKeyword()) { $params['keyword'] = $this->getKeyword(); }
      if ($this->getOwner()) { $params['owner'] = $this->getOwner(); }
      if ($this->getParticipant()) { $params['participant'] = $this->getParticipant(); }
      $params['overdue'] = $this->isOverdue();
      if ($this->getProjectId()) { $params['projectId'] = $this->getProjectId(); }
      if ($this->getProjectType()) { $params['type'] = $this->getProjectType(); }
      if ($this->getStart()) { $params['started'] =& $this->getStart(); }
      if ($this->getStatus()) { $params['status'] =& $this->getStatus(); }
      $searchResults =& MyProjectsManager::search($params);
      $pids = array();
      $keys = array_keys($searchResults);
      foreach($keys as $key) {
        $pids[] = $searchResults[$key]['projectId'];
      }
      return $pids;
      ]]></introduction>
    </aop>
    <attribute key="searchId" sequence="1" />
    <attribute key="end" date-format="m/d/Y" type="date" />
    <attribute key="includeArchived" type="boolean" />
    <attribute key="keyword" max-length="255" />
    <attribute key="name" max-length="64" />
    <attribute key="participant" max-length="16" />
		<attribute key="owner" type="int" />
    <attribute key="overdue" type="boolean" />
    <attribute key="projectId" type="int" />
    <attribute key="projectType" max-length="255" />
    <attribute key="start" date-format="m/d/Y" type="date" />
    <attribute key="status" default="'active'" depends="option" max-length="16">
      <var key="options" value="text.status.active=active text.status.hold=hold text.status.completed=completed text.status.cancelled=cancelled text.status.error=error" />
    </attribute>
    <attribute key="uid" type="int" />
  </entity>
  
  <entity key="MyToolboxArtifact" primary-key="artifactId">
    <aop>
      <introduction key="getArtifactConfig" class="vo" type="method" value="&amp;getArtifactConfig()"><![CDATA[
      // returns the artifact configuration. returns an SRA_Error object if the 
      // artifact configuration could not be accessed
      if (!isset($this->_artifactConfig)) {
        if (MyToolboxProcessVO::isValid($process =& $this->getProcess())) {
          if (MyToolboxProcess::isValid($processConfig =& $process->getProcessConfig())) {
            if (isset($processConfig->artifacts[$this->getArtifact()])) {
              $this->_artifactConfig =& $processConfig->artifacts[$this->getArtifact()];
            }
            else {
              $this->_artifactConfig =& SRA_Error::logError('MyToolboxArtifactVO::getArtifactConfig: Failed - Artifact "' . $this->getArtifact() . '" is not valid for process "' . $processConfig->id . '"', __FILE__, __LINE__);
            }
          }
          else {
            $this->_artifactConfig =& SRA_Error::logError('MyToolboxArtifactVO::getArtifactConfig: Failed - Unable to retrieve process configuration', __FILE__, __LINE__);
          }
        }
        else {
          $this->_artifactConfig =& SRA_Error::logError('MyToolboxArtifactVO::getArtifactConfig: Failed - Unable to retrieve process', __FILE__, __LINE__);
        }
      }
      return $this->_artifactConfig;
      ]]></introduction>
      <introduction key="getIconUri" class="vo" type="method" value="getIconUri($size=16)"><![CDATA[
      // returns the URI icon for this file
      return $this->_icon ? SRA_Controller::getServerUri() . MY_TOOLBOX_ARTIFACT_ICON_BASE_URI . $size . '/' . basename($this->_icon) : NULL;
      ]]></introduction>
      <introduction key="MY_TOOLBOX_ARTIFACT_ICON_BASE_URI" class="vo" type="constant" value="MY_TOOLBOX_ARTIFACT_ICON_BASE_URI='plugins/core/icons/mimetypes/'" />
    </aop>
    <attribute key="artifactId" sequence="1" />
    <attribute key="artifact" depends="required" max-length="32" />
    <attribute key="file" depends="required" file-icon-attr="icon" file-uri-attr="fileUri" is-file="1" lazy-load-exclusive="1" max-length="1073741824" type="blob" />
    <attribute key="fileName" max-length="64" />
    <attribute key="fileUri" max-length="255" />
    <attribute key="icon" max-length="255" />
    <attribute key="label" max-length="64" />
    <attribute key="process" depends="required" type="MyToolboxProcess" />
    <attribute key="version" max-length="8" />
  </entity>
  
  <entity key="MyToolboxProcess" primary-key="processId">
    <aop>
      <aspect key="setEndedTimestamp" pointcut="dao.update"><![CDATA[
      // sets the ended timestamp
      if (!$record->getEnded() && ($record->getStatus() == MY_TOOLBOX_PROCESS_STATUS_SUCCESS || $record->getStatus() == MY_TOOLBOX_PROCESS_STATUS_FAILED) && $record->isDirty('status')) {
        $record->setEnded(new SRA_GregorianDate());
      }
      ]]></aspect>
      <aspect key="setUid" pointcut="dao.insert"><![CDATA[
      // sets the uid
      if (!$record->recordExists && !$record->getUid()) {
        global $user;
        if ($user) { $record->getUid($user->getUid()); }
      }
      ]]></aspect>
      
      <introduction key="getProcessConfig" class="vo" type="method" value="&amp;getProcessConfig()"><![CDATA[
      // returns the process configuration. returns an SRA_Error object if the 
      // process configuration could not be accessed
      if (!isset($this->_processConfig)) {
        if (MyToolboxProject::isValid($projectConfig =& $this->getProjectConfig($this->getProject()))) {
          if (!($this->_processConfig =& $projectConfig->getProcess($this->getProcess()))) {
            $this->_processConfig =& SRA_Error::logError('MyToolboxProcessVO::getProcessConfig: Failed - Unable to retrieve process configuration for ' . $this->getProcess(), __FILE__, __LINE__);
          }
        }
        else {
          $this->_processConfig =& SRA_Error::logError('MyToolboxProcessVO::getProcessConfig: Failed - Unable to retrieve project configuration for ' . $this->getProject(), __FILE__, __LINE__);
        }
      }
      return $this->_processConfig;
      ]]></introduction>
      <introduction key="getProjectConfig" class="vo" type="method" value="&amp;getProjectConfig()"><![CDATA[
      // returns the project configuration for this process. returns an 
      // SRA_Error object if the project configuration could not be accessed
      if (!isset($this->_projectConfig)) {
        if (!MyToolboxProject::isValid($this->_projectConfig =& MyToolboxManager::getProjectSetup($this->getProject()))) {
          $this->_processConfig =& SRA_Error::logError('MyToolboxProcessVO::getProjectConfig: Failed - Unable to retrieve project configuration for ' . $this->getProject(), __FILE__, __LINE__);
        }
      }
      return $this->_projectConfig;
      ]]></introduction>
      <introduction key="getStatusOptions" class="vo" type="method" value="getStatusOptions()"><![CDATA[
      // returns the status options for this process
      $options = array();
      if (MyToolboxProject::isValid($projectConfig =& $this->getProjectConfig($this->getProject()))) {
        $options[MY_TOOLBOX_PROCESS_STATUS_INITIALIZED] = $projectConfig->labelStatusInitialized;
        $options[MY_TOOLBOX_PROCESS_STATUS_WAIT] = $projectConfig->labelStatusWait;
        $options[MY_TOOLBOX_PROCESS_STATUS_PENDING] = $projectConfig->labelStatusPending;
        $options[MY_TOOLBOX_PROCESS_STATUS_SUCCESS] = $projectConfig->labelStatusSuccess;
        $options[MY_TOOLBOX_PROCESS_STATUS_FAILED] = $projectConfig->labelStatusFailed;
      }
      return $options;
      ]]></introduction>
      <introduction key="getUser" class="vo" type="method" value="&amp;getUser()"><![CDATA[
      if (!isset($this->_user) && $this->_uid) {
        $dao =& SRA_DaoFactory::getDao('OsUser');
        $this->_user =& $dao->findByPk($this->_uid);
      }
      return $this->_user;
      ]]></introduction>
      <introduction key="includeMyToolboxManager" class="vo" type="include" value="plugins/productivity/MyToolboxManager.php" />
      <introduction key="MY_TOOLBOX_PROCESS_STATUS_FAILED" class="vo" type="constant" value="MY_TOOLBOX_PROCESS_STATUS_FAILED='failed'" />
      <introduction key="MY_TOOLBOX_PROCESS_STATUS_INITIALIZED" class="vo" type="constant" value="MY_TOOLBOX_PROCESS_STATUS_INITIALIZED='initialized'" />
      <introduction key="MY_TOOLBOX_PROCESS_STATUS_PENDING" class="vo" type="constant" value="MY_TOOLBOX_PROCESS_STATUS_PENDING='pending'" />
      <introduction key="MY_TOOLBOX_PROCESS_STATUS_SUCCESS" class="vo" type="constant" value="MY_TOOLBOX_PROCESS_STATUS_SUCCESS='success'" />
      <introduction key="MY_TOOLBOX_PROCESS_STATUS_WAIT" class="vo" type="constant" value="MY_TOOLBOX_PROCESS_STATUS_WAIT='wait'" />
    </aop>
    <attribute key="processId" sequence="1" />
    <attribute key="artifacts" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" table-pk-column="process" type="MyToolboxArtifact" />
    <attribute key="ended" type="time" />
    <attribute key="entityId" type="int" />
    <attribute key="started" default="new SRA_GregorianDate()" depends="required" type="time" />
    <attribute key="parentProcess" type="MyToolboxProcess" />
    <attribute key="process" depends="required" max-length="32" />
    <attribute key="project" depends="required" max-length="32" />
    <attribute key="status" default="MY_TOOLBOX_PROCESS_STATUS_INITIALIZED" depends="option" max-length="16">
      <var key="code" value="$options = $this->getStatusOptions();" />
    </attribute>
    <attribute key="subProcesses" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" table-pk-column="parent_process" type="MyToolboxProcess" />
    <attribute key="triggerId" max-length="32" />
    <attribute key="uid" depends="required" type="int" />
  </entity>
  
  
  <entity key="OsUser">
    <ajax-service key="myProjectsUpdateUserPreferences" include-attrs="myProjectsFilesFormat myProjectsFilesIcon myProjectsFilesSortBy myProjectsSearchAdv myProjectsUpcomingThreshold uid" update="1">
      <ajax-constraint-group key="validateUserPermissions">
        <ajax-constraint attr="uid" value="user_uid" value-type="global" />
      </ajax-constraint-group>
    </ajax-service>
    <aop>
      <introduction key="getMyProjectsUpcomingThresholdDate" class="vo" type="method" value="&amp;getMyProjectsUpcomingThresholdDate()"><![CDATA[
      // returns an SRA_GregorianDate object representing the date when the 
      // user's upcoming threshold takes affect
      $threshold = new SRA_GregorianDate();
      $threshold->setDateOnly(TRUE);
      $threshold->jump(SRA_GREGORIAN_DATE_UNIT_DAY, $this->getMyProjectsUpcomingThreshold());
      return $threshold;
      ]]></introduction>
      <introduction key="getProjectParticipantsHash" class="vo" type="method" value="getProjectParticipantsHash()"><![CDATA[
      // returns a hash of all of the potential project participants indexed by 
      // gid or uid (gids are prefixed with 'gid:'). if the user has sub-users, 
      // an additional option for all sub-users will be added. the value in 
      // the hash will be the user's name or group name
      if (!isset($this->_projectParticipantsHash)) {
        $this->_projectParticipantsHash = array();
        if ($this->hasChildren()) { $this->_projectParticipantsHash['0'] = $this->getEntityResourcesString('MyProjects.subUsers'); }
        foreach($this->getAllGidsHash('name') as $gid => $name) {
          $this->_projectParticipantsHash['gid:' . $gid] = $name . ' (' . $this->getEntityResourcesString('OsGroup') . ')';
          foreach(OsGroupVO::getUserHash($gid) as $uid => $name) {
            if (!isset($this->_projectParticipantsHash[$uid])) { $this->_projectParticipantsHash[$uid] = $name; }
          }
        }
        foreach($this->getAllUidsHash('name', $this->getUid()) as $uid => $name) {
          if (!isset($this->_projectParticipantsHash[$uid])) { $this->_projectParticipantsHash[$uid] = $name; }
        }
        $this->_projectParticipantsHash['[email]'] = $this->getEntityResourcesString('MyProjects.emailParticipant');
      }
      return $this->_projectParticipantsHash;
      ]]></introduction>
      <introduction key="isInMyProjectsUpcomingThreshold" class="vo" type="method" value="isInMyProjectsUpcomingThreshold(&amp;$date)"><![CDATA[
      // returns TRUE if $date is somewhere between today and the user's upcoming 
      // threshold date
      return SRA_GregorianDate::isValid($date) && $date->isTodayOrFuture() && $date->compare($this->getMyProjectsUpcomingThresholdDate()) <= 0;
      ]]></introduction>
    </aop>
    <attribute key="myProjectsFilesFormat" default="'icon'" depends="option" max-length="16">
      <var key="resources" value="etc/plugins/productivity/l10n/myprojects-files-format" />
      <view key="input" extends="input-select-required" />
    </attribute>
    <attribute key="myProjectsFilesIcon" default="TRUE" type="boolean">
      <view key="input" extends="input-select-bool-required" />
    </attribute>
    <attribute key="myProjectsFilesSortBy" default="'name'" depends="option" max-length="16">
      <var key="resources" value="etc/plugins/productivity/l10n/myprojects-files-sortby" />
      <view key="input" extends="input-select-required" />
    </attribute>
    <attribute key="myProjectsSavedSearches" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectsSavedSearch" />
    <attribute key="myProjectsSearchAdv" type="boolean">
      <view key="input" extends="input-select-bool-required" />
    </attribute>
    <attribute key="myProjectsSubscriptions" cardinality="0..*" on-delete-cascade="1" on-remove-delete="1" type="MyProjectDiscussionSubscriber" />
    <attribute key="myProjectsUpcomingThreshold" default="14" depends="range" type="int">
      <var key="min" value="1" />
      <var key="max" value="21" />
      <view key="input" extends="input-select-required" />
    </attribute>
    
		<view key="myProjectsPreferences" template="model/sra-grid.tpl">
      <param id="header"                                         value="{$getString(MyProjects.preferences)}" />
			<param id="userName"                    type="col-set0-0"  value="output" />
      <param id="myProjectsSearchAdv"         type="col-set0-0"  value="input" />
      <param id="myProjectsUpcomingThreshold" type="col-set0-0"  value="input" />
      <param id="myProjectsFilesFormat"       type="col-set0-0"  value="input" />
      <param id="myProjectsFilesIcon"         type="col-set0-0"  value="input" />
      <param id="myProjectsFilesSortBy"       type="col-set0-0"  value="input" />
      <param id="class"                       type="table-attrs" value="preferencesTable" />
		</view>
  </entity>
  
  <global-ajax-service key="myProjectsActivateWhiteboard" identifier="plugins/productivity/MyProjectsManager::activateWhiteboard" type="method" />
  <global-ajax-service key="myProjectsCompleteProject" identifier="plugins/productivity/MyProjectsManager::completeProject" type="method" />
  <global-ajax-service key="myProjectsCompleteTask" identifier="plugins/productivity/MyProjectsManager::completeTask" type="method" />
  <global-ajax-service key="myProjectsGetCategories" identifier="plugins/productivity/MyProjectsManager::getCategories" type="method" />
  <global-ajax-service key="myProjectsGetComments" identifier="plugins/productivity/MyProjectsManager::getComments" type="method" />
  <global-ajax-service key="myProjectsGetDiscussion" identifier="plugins/productivity/MyProjectsManager::getDiscussion" type="method" />
  <global-ajax-service key="myProjectsGetDueDates" identifier="plugins/productivity/MyProjectsManager::getDueDates" type="method" />
  <global-ajax-service key="myProjectsGetFiles" identifier="plugins/productivity/MyProjectsManager::getFiles" type="method" />
  <global-ajax-service key="myProjectsGetLatestActivity" identifier="plugins/productivity/MyProjectsManager::getLatestActivity" type="method" />
  <global-ajax-service key="myProjectsGetParticipants" identifier="plugins/productivity/MyProjectsManager::getParticipants" type="method" />
  <global-ajax-service key="myProjectsGetTasks" identifier="plugins/productivity/MyProjectsManager::getTasks" type="method" />
  <global-ajax-service key="myProjectsGetTemplate" identifier="plugins/productivity/MyProjectsTemplate::ajaxGetProjectTemplate" type="method" />
  <global-ajax-service key="myProjectsLoad" identifier="plugins/productivity/MyProjectsManager::loadProject" type="method" />
  <global-ajax-service key="myProjectsSearch" identifier="plugins/productivity/MyProjectsManager::search" type="method" />
  <global-ajax-service key="myProjectsSubscribe" identifier="plugins/productivity/MyProjectsManager::subscribe" type="method" />
  <global-ajax-service key="myProjectsUnsubscribe" identifier="plugins/productivity/MyProjectsManager::unsubscribe" type="method" />
  <global-ajax-service key="myProjectsUpdateTaskForm" identifier="plugins/productivity/MyProjectsManager::updateTaskForm" type="method" />
  
  <index columns="archived" key="myProjectArchivedIdx" table="my_project" />
  <index columns="created" key="myProjectCreatedIdx" table="my_project" />
  <index columns="creator" key="myProjectCreatorIdx" table="my_project" />
  <index columns="due_date" key="myProjectDueDateIdx" table="my_project" />
  <index columns="ended" key="myProjectEndedIdx" table="my_project" />
  <index columns="last_updated" key="myProjectLastUpdatedIdx" table="my_project" />
  <index columns="status" key="myProjectStatusIdx" table="my_project" />
  <index columns="template" key="myProjectTemplateIdx" table="my_project" />
  <index columns="search_index" key="myProjectSearchIdx" modifier="fulltext" table="my_project_search_index" />
    
  <index columns="last_updated" key="myProjectCommentLastUpdatedIdx" table="my_project_comment" />
  <index columns="message_id" key="myProjectCommentMessageIdx" table="my_project_comment" />
  <index columns="project_id" key="myProjectCommentProjectIdx" table="my_project_comment" />
  <index columns="whiteboard_id" key="myProjectCommentWhiteboardIdx" table="my_project_comment" />
    
  <index columns="participant_id" key="myProjectDiscussionSubscriberParticipantIdx" table="my_project_discussion_subscriber" />
  <index columns="message_id" key="myProjectDiscussionSubscriberMessageIdx" table="my_project_discussion_subscriber" />
  <index columns="uid" key="myProjectDiscussionSubscriberUidIdx" table="my_project_discussion_subscriber" />
  <index columns="whiteboard_id" key="myProjectDiscussionSubscriberWhiteboardIdx" table="my_project_discussion_subscriber" />
  
  <index columns="category" key="myProjectFileCategoryIdx" table="my_project_file" />
  <index columns="comment_id" key="myProjectFileCommentIdx" table="my_project_file" />
  <index columns="file_index" key="myProjectFileIdx" modifier="fulltext" table="my_project_file" />
  <index columns="last_updated" key="myProjectFileLastUpdatedIdx" table="my_project_file" />
  <index columns="message_id" key="myProjectFileMessageIdx" table="my_project_file" />
  <index columns="project_id" key="myProjectFileProjectIdx" table="my_project_file" />
  <index columns="task_id" key="myProjectFileTaskIdx" table="my_project_file" />
  
  <index columns="project_id" key="myProjectFileCategoryProjectIdx" table="my_project_file_category" />
  
  <index columns="file_index" key="myProjectFileVersionIdx" modifier="fulltext" table="my_project_file_version" />
  <index columns="last_updated" key="myProjectFileVersionLastUpdatedIdx" table="my_project_file_version" />
  <index columns="project_id" key="myProjectFileVersionProjectIdx" table="my_project_file_version" />
  
  <index columns="category" key="myProjectMessageCategoryIdx" table="my_project_message" />
  <index columns="last_updated" key="myProjectMessageLastUpdatedIdx" table="my_project_message" />
  <index columns="project_id" key="myProjectMessageProjectIdx" table="my_project_message" />
  <index columns="task_id" key="myProjectMessageTaskIdx" table="my_project_message" />
  
  <index columns="project_id" key="myProjectMessageCategoryProjectIdx" table="my_project_message_category" />
  
  <index columns="project_id" key="myProjectMessageParticipantProjectIdx" table="my_project_message_participant" />
    
  <index columns="due_date" key="myProjectTaskDueDateIdx" table="my_project_task" />
  <index columns="last_updated" key="myProjectTaskLastUpdatedIdx" table="my_project_task" />
  <index columns="parent" key="myProjectTaskParentIdx" table="my_project_task" />
  <index columns="predecessor" key="myProjectTaskPredecessorIdx" table="my_project_task" />
  <index columns="project_id" key="myProjectTaskProjectIdx" table="my_project_task" />
  <index columns="status" key="myProjectTaskStatusIdx" table="my_project_task" />
  <index columns="task_id, status, list" key="myProjectTaskIdStatusListIdx" table="my_project_task" />
  
  <index columns="last_updated" key="myProjectWhiteboardLastUpdatedIdx" table="my_project_whiteboard" />
  <index columns="project_id" key="myProjectWhiteboardProjectIdx" table="my_project_whiteboard" />
  <index columns="task_id" key="myProjectWhiteboardTaskIdx" table="my_project_whiteboard" />
  
</entity-model>

